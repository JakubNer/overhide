swagger: '2.0'
host: overhide.io
basePath: /broker
schemes:
  - https
  - wss
info:
  description: |
    This is the API contract expected to be exposed by an overhide "broker".  This API is represented by the green "broker API" connector in the overhide component model:

    ![overhide component model](https://github.com/JakubNer/overhide/raw/master/docs/images/provided.png)

    To load this API into another [Swagger viewer/editor](https://editor.swagger.io) find [the GitHub *Swagger 2.0* definition file](https://github.com/JakubNer/overhide/blob/master/docs/broker.yaml) and import as YAML.

    Read this API with reference to the [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md).

    ***
      A note on schemes used in the API.  All operations unless explicitly indicated use the HTTPS scheme.  The [backchannel-message/../subscribe/.. operation](#operation--backchannel-message-subscribe--segment-key--get) uses the WSS scheme.
    ***
  version: 1.0.0
  title: Overhide Broker API
  contact:
    email: info@overhide.io
  license:
    name: MIT License
    url: 'https://pages.github.com/JakubNer/overhide/blob/master/LICENSE'
tags:
  - name: capabilities
    description: |
      Discover capabilities of the overhide broker system.
      * subscription providers
      * subscription tiers
  - name: auth
    description: |
      Authentication, authorization, and credential management:

      * authenticate providing an [access token](#security-definition-Authorization Header).
      * work with  authority levels.
      * change *identity* credentials.  Setting *identity* for the first time is
      done with the [authenticate endpoint](#path--auth-authenticate).
      * work with subscription details for a supported remuneration API and a
      given *identity*.
  - name: data
    description: |
      Data key-value CRUD operations; modifying data values in *datastore-keys*.
  - name: backchannel queues
    description: |
      Publishing messages to backchannel queues, subscribing to notifications, and de-queueing the messages.
  - name: datastore-key settings
    description: |
      Setting access metadata for *datastore-keys*.
  - name: import/export
    description: |
      Batch import and export of all user's data and messages.

      Envisioned use cases include backup and broker transfer.
paths:
  /capabilities/remuneration-providers:
    get:
      summary: List of remuneration providers supported.
      description: |
        Mapping of remuneration providers to the broker's public address for given
        provider.
      tags:
        - capabilities
      operationId: getRemunerationProviders
      produces:
        - application/json
      responses:
        200:
          description: |
            Array of objects each defining one remuneration provider mapping.
          schema:
            type: array
            items:
              $ref: "#/definitions/RemunerationProvider"
        429:
          $ref: "#/responses/429"
  /capabilities/remuneration-tiers/{remuneration-key}:
    get:
      summary: List of subscription tiers available.
      description: |
         List of subscription tiers available for this broker from a given
         remuneration provider.
      tags:
        - capabilities
      operationId: getRemunerationTiers
      parameters:
        - in: path
          name: remuneration-key
          required: true
          description: |
            One of the remuneration provider keys from */capabilities/remuneration-providers*
          type: string
      produces:
        - application/json
      responses:
        200:
          description: |
            Array of objects each defining one remuneration tier mapping.
          schema:
            type: array
            items:
              $ref: "#/definitions/RemunerationTier"
        400:
          $ref: "#/responses/400"
        429:
          $ref: "#/responses/429"
  /auth/authenticate:
    put:
      summary: Authenticate an [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) returning a token.
      description: |
        Authenticate an [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) returning a token to be used for [token
        authentication](#security-definition-Authorization Header) in the rest of the API.
      tags:
        - auth
      parameters:
        - in: body
          name: authentication
          description: |
            Authentication parameters.
          schema:
            type: object
            required:
              - remuneration-key
              - secret-phrase
              - user-address
              - secret-phrase-signed
            properties:
              remuneration-key:
                type: string
                description: |
                  Key from remuneration-providers which contains subscription payment(s) from the
                  provided *user-address* to this broker's *broker-address*.

                  Must be one of the remuneration provider keys from this broker's [capabilities](#operation--capabilities-remuneration-providers-get).
              secret-phrase:
                type: string
                description: |
                  A secret phrase for the specified user-address.  Once a user authenticates against the broker with a secret-phrase and a user-address, the secret-phrase is tied to the user-address indefinitely, unless changed by [change-credentials](#operation--auth-change-credentials-put).
              user-address:
                type: string
                description: |
                  A public user-address to verify an active subscription to this broker's broker-address.

                  Must be an address for the remuneration provider indicated in *remuneration-key*.
              secret-phrase-signed:
                type: string
                description: |
                  The *secret-phrase* provided above signed with the private key corrsponding to the
                  *user-address*.

                  The signature uses Bitcoin's ECDSA curve - secp256k1.
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: |
            Authentication token is returned to be used in subsequent calls into
            overhide broker.
          schema:
            type: string
        400:
          $ref: "#/responses/400"
        402:
          description: |
            Payment Required -- Remuneration provider indicates insufficient transactions to the broker system to meet a
            service tier subscription requirements.

            See [subscriptions write-up](https://github.com/JakubNer/overhide/blob/master/docs/identity.md#subscriptions).
        409:
          $ref: "#/responses/409"
        429:
          $ref: "#/responses/429"
  /auth/get-authorities:
    get:
      summary: Retrieves authorities for an [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md).
      description: |
        Retrieve authorities for an [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md).  Authorities are rates and limits as specified by [the *Authorities* return object](#definition-Authorities).

        If an *identity* has multiple transactions with a reumneration provider, the transactions are added to yield the best service tier.

        Authorities are valid for the duration of the [security token](#security-definition-Authorization Header).

        See [identities write-up](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) for more information.
      tags:
        - auth
      security:
        - Authorization Header: []
      produces:
        - application/json
      responses:
        200:
          description: |
            Authorized rates and limits are returned.
          schema:
            $ref: "#/definitions/Authorities"
        401:
           $ref: "#/responses/401"
        429:
          $ref: "#/responses/429"
  /auth/change-credentials:
    put:
      summary: Change authentication of token's user.
      description: |
      tags:
        - auth
      parameters:
        - in: body
          name: new-authentication
          description: |
            New authentication credentials for user indicated by the *identity* in the [security header](#security-definition-Authorization Header).
          schema:
            type: object
            required:
              - new-remuneration-key
              - new-secret-phrase
              - new-user-address
              - new-secret-phrase-signed
            properties:
              new-remuneration-key:
                type: string
                description: |
                  Key from remuneration-providers which contains subscription payment(s) from the
                  provided *new-user-address* to this broker's *broker-address*.

                  Must be one of the remuneration provider keys from this broker's [capabilities](#operation--capabilities-remuneration-providers-get).
              new-secret-phrase:
                type: string
                description: |
                  A new secret phrase for the new user-address.  Once credentials are changed successfully; the *new-secret-phrase* is tied to the *new-user-address* indefinitely, unless changed again by [change-credentials](#operation--auth-change-credentials-put).
              new-user-address:
                type: string
                description: |
                  A public user-address to verify an active subscription to this broker's broker-address.

                  Must be an address for the remuneration provider indicated in *new-remuneration-key*.
              new-secret-phrase-signed:
                type: string
                description: |
                  The *new-secret-phrase* provided above signed with the private key corrsponding to the
                  *new-user-address*.

                  The signature uses Bitcoin's ECDSA curve - secp256k1.
      security:
        - Authorization Header: []
      consumes:
        - application/json
      responses:
        200:
          description: |
            Credentials successfully changed.
        400:
          $ref: "#/responses/400"
        401:
           $ref: "#/responses/401"
        409:
          $ref: "#/responses/409"
        429:
          $ref: "#/responses/429"
  /auth/get-transactions/{remuneration-key}/{from-address}/{to-address}:
    get:
      summary: Retrieve remuneration transactions.
      description: |
        Retrieve the latest remuneration transactions on *remuneration-key* from *from-address* to *to-address*
      tags:
        - auth
      parameters:
        - in: path
          name: remuneration-key
          required: true
          description: |
            Key from remuneration-providers which contains payment(s) from the
            provided *from-address* to the provided *to-address*.

            Must be one of the remuneration provider keys from this broker's [capabilities](#operation--capabilities-remuneration-providers-get).
          type: string
        - in: path
          name: from-address
          required: true
          description: |
            A public address from which to verify payment details (amount/date) to the *to-address*.

            Must be an address from the remuneration provider indicated in *remuneration-key*.
          type: string
        - in: path
          name: to-address
          required: true
          description: |
            The target public address to check for payment made.

            Must be an address from the remuneration provider indicated in *remuneration-key*.

            This could be this broker system's public payment address with
            the reumneration provider (as retrieved via [remuneration provider](#definition-RemunerationProvider)).

            This could be any other public address furnished by the remuneration provider, e.g.
            the service's public address: to check for app purchase etc.
          type: string
        - in: query
          name: max-most-recent
          required: false
          type: integer
          description: |
            Number of most recent transactions to retrieve.
        - in: query
          name: since
          required: false
          type: string
          description: |
            Retrieve transactions since this date-time (inclusive) until now.

            The date-time is a string in [ISO 8601/RFC3339 format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14).
      security:
        - Authorization Header: []
      produces:
        - application/json
      responses:
        200:
          description: |
            List of transactions.
          schema:
            type: array
            items:
              $ref: "#/definitions/Transaction"
        400:
          $ref: "#/responses/400"
        401:
           $ref: "#/responses/401"
        409:
          $ref: "#/responses/409"
        429:
          $ref: "#/responses/429"
  /value/{segment-key}:
    put:
      summary: Set value of datastore-key.
      description: |
        Payload contents is written as a new value into *datastore-key* (segment-key @ identity).

        For the *set* to succeed the *datastore-key* (segment-key @ identity) must
        either be brand new of already owned by authorization token owner.
      tags:
        - data
      parameters:
        - in: body
          name: datastore-value
          schema:
            type: string
            format: byte
        - in: path
          name: segment-key
          required: true
          description: |
            See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#segment-key).
          type: string
        - in: query
          name: identity
          required: false
          description: |
            Optional identity.  If not provided, identity is that of token owner.

            See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#identity).
          type: string
      security:
        - Authorization Header: []
      consumes:
        - application/octet-stream
      responses:
        200:
          description: |
            Value successfully set.
        400:
          $ref: "#/responses/400"
        403:
          $ref: "#/responses/403"
        429:
          $ref: "#/responses/429"
    get:
      summary: Get value of datastore-key.
      description: |
        Get value of *datastore-key* (segment-key @ identity).
      tags:
        - data
      parameters:
        - in: path
          name: segment-key
          required: true
          description: |
            See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#segment-key).
          type: string
        - in: query
          name: identity
          required: false
          description: |
            Optional identity.  If not provided, identity is that of token owner.

            See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#identity).
          type: string
      security:
        - Authorization Header: []
      produces:
        - application/octet-stream
      responses:
        200:
          description: |
            The value of *datastore-key* (segment-key @ identity).
        400:
          $ref: "#/responses/400"
        403:
          $ref: "#/responses/403"
        429:
          $ref: "#/responses/429"
    delete:
      summary: Delete datastore-key.
      description: |
        Delete *datastore-key* (segment-key @ identity).  The *datastore-key* must be
        owned by the token owner.
      tags:
        - data
      parameters:
        - in: path
          name: segment-key
          required: true
          description: |
            See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#segment-key).
          type: string
        - in: query
          name: identity
          required: false
          description: |
            Optional identity.  If not provided, identity is that of token owner.

            See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#identity).
          type: string
      security:
        - Authorization Header: []
      responses:
        200:
          description: |
            The value of *datastore-key* (segment-key @ identity).
        400:
          $ref: "#/responses/400"
        403:
          $ref: "#/responses/403"
        429:
          $ref: "#/responses/429"
  /backchannel-message/{segment-key}:
    post:
      summary: Enqueue a message to a given datastore-key backchannel.
      description: |
        Enqueue a message to a given *datastore-key* (*segment-key* @ *identity*) backchannel.

        If the *datastore-key*'s *allow-publish* setting is "self", the *identity* in the authentication token must match the *datastore-key* owner.

        If the *datastore-key*'s *allow-publish* setting is "signed", the author of the backchannel message is the *identity* tied ot the authorization token passed to this API.  Message author's public-key (hash) is present in the token and compared to the *allowed-publishers* list--if any--for this *datastore-key*.

        If the *datastore-key*'s *allow-publish* setting is "any", the *identity* in the authentication token must simply be valid: a valid broker system user is publishing.

        See the [settings getter](#operation--settings--segment-key--get) for the above settings.
      tags:
        - backchannel queues
      parameters:
        - in: body
          name: backchannel message
          schema:
            type: string
            format: byte
        - in: path
          name: segment-key
          required: true
          description: |
            See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#segment-key).
          type: string
        - in: query
          name: identity
          required: false
          description: |
            Optional identity.  If provided, must be one of public restricted identities:  0 .. 9999.  If not provided, identity is that of token owner.

            See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#identity).
          type: string
      security:
        - Authorization Header: []
      consumes:
        - application/octet-stream
      responses:
        200:
          description: |
            Settings applied successfully.
        400:
          $ref: "#/responses/400"
        403:
          $ref: "#/responses/403"
        429:
          $ref: "#/responses/429"
    get:
      summary: Retrieve all messages from the backchannel at the givent datastore-key.
      description: |
        Retrieve messages from the backchannel at the given *datastore-key* (*segment-key* @ *identity*).
      tags:
        - backchannel queues
      parameters:
        - in: path
          name: segment-key
          required: true
          description: |
            See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#segment-key).
          type: string
        - in: query
          name: identity
          required: false
          description: |
            Optional identity.  If provided, must be one of public restricted identities:  0 .. 9999.  If not provided, identity is that of token owner.

            See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#identity).
          type: string
      security:
        - Authorization Header: []
      produces:
        - application/json
      responses:
        200:
          description: |
            Messages enqueued at *datastore-key* (segment-key @ identity) in increasing *seq-id* order.

            Messages are in order of consecutivelly increasing message sequence ID (*seq-id*).  The message sequence IDs are internal system identifiers for the messages furnished by this *datastore-key*, they're unique to this *datastore-key* and consecutive.

            Not all messages may be returned.  The response contains a count of messages still left with the broker system.  The *seq-id* of the most recent message returned (highest *seq-id*) plus the count of messages remaining, is the *seq-id* of most recent message left on the broker system.
          schema:
            type: object
            required:
              - remaining-count
              - messages
            properties:
              remaining-count:
                type: integer
                description: |
                  Count of messages still left with the broker system.
              messages:
                type: array
                items:
                  $ref: "#/definitions/Message"
        400:
          $ref: "#/responses/400"
        403:
          $ref: "#/responses/403"
        429:
          $ref: "#/responses/429"
  /backchannel-message/{segment-key}/acknowledge/{seq-id}:
    put:
      summary: Acknowledge all messages up to and including seq-id for given datastore-key.
      description: |
        Acknowledge all messages up to and including seq-id have been handled.  All messages up to seq-id will be removed from the backchannel.
      tags:
        - backchannel queues
      parameters:
        - in: path
          name: segment-key
          required: true
          description: |
            See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#segment-key).
          type: string
        - in: path
          name: seq-id
          required: true
          type: string
          description: |
            *seq-id* up to which--inclusive--to acknowledge backchannel processing.
        - in: query
          name: identity
          required: false
          description: |
            Optional identity.  If provided, must be one of public restricted identities:  0 .. 9999.  If not provided, identity is that of token owner.

            See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#identity).
          type: string
      security:
        - Authorization Header: []
      responses:
        200:
          description: |
            Acknowledgment successful.
        400:
          $ref: "#/responses/400"
        403:
          $ref: "#/responses/403"
        429:
          $ref: "#/responses/429"
  /backchannel-message/{segment-key}/subscribe:
    get:
      summary:  Owner--identified in token--subscribes to notifications of new messages in datastore-key.
      description: |
        Owner--identified in token--subscribes to notifications of new messages in *datastore-key* (*segment-key* @ *identity*).  Subscription doesn't send actual messages, just notification of new messages with a new *seq-id*.

        Websocket (WSS scheme) subscription endpoint.
      tags:
        - backchannel queues
      parameters:
        - in: path
          name: segment-key
          required: true
          description: |
            See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#segment-key).
          type: string
        - in: query
          name: identity
          required: false
          description: |
            Optional identity.  If provided, must be one of public restricted identities:  0 .. 9999.  If not provided, identity is that of token owner.

            See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#identity).
          type: string
      security:
        - Authorization Query: []
      responses:
        default:
          description: |
            When this operation is first called the immediate response of this WSS subscription is either a successful or failed connection: websocket connections are left open on success and closed on failure, sans reason.

            If the websocket connection is successful and remains open, the following details the possible events that will come across.

            An example event stream coming across the Web socket could be:

            ```
            {
              "type": "new-message",
              "seq-id": 123
            }
            ```
            ```
            {
              "type": "new-message",
              "seq-id": 124
            }
            ```
          schema:
            type: array
            items:
              $ref: "#/definitions/Event"
  /settings/{segment-key}:
    put:
      summary: Setup settings for given datastore-key (segment-key @ identity).
      description: |
        Setup data and backchannel settings for given *datastore-key* (*segment-key* @ *identity*).
      tags:
        - datastore-key settings
      parameters:
        - in: body
          name: datastore-value
          schema:
            $ref: "#/definitions/DatastoreKeySettings"
        - in: path
          name: segment-key
          required: true
          description: |
            See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#segment-key).
          type: string
        - in: query
          name: identity
          required: false
          description: |
            Optional identity.  If provided, must be one of public restricted identities:  0 .. 9999.  If not provided, identity is that of token owner.

            See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#identity).
          type: string
      security:
        - Authorization Header: []
      consumes:
        - application/json
      responses:
        200:
          description: |
            Settings applied successfully.
        400:
          $ref: "#/responses/400"
        403:
          $ref: "#/responses/403"
        429:
          $ref: "#/responses/429"
    get:
      summary: Returns settings for a given datastore-key.
      description: |
        Returns data and backchannel settings for a given *datastore-key* (*segment-key* @ *identity*).
      tags:
        - datastore-key settings
      parameters:
        - in: path
          name: segment-key
          required: true
          description: |
            See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#segment-key).
          type: string
        - in: query
          name: identity
          required: false
          description: |
            Optional identity.  If provided, must be one of public restricted identities:  0 .. 9999.  If not provided, identity is that of token owner.

            See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#identity).
          type: string
      security:
        - Authorization Header: []
      produces:
        - application/json
      responses:
        200:
          description: |
            The value of *datastore-key* (segment-key @ identity).
          schema:
            $ref: "#/definitions/DatastoreKeySettings"
        400:
          $ref: "#/responses/400"
        403:
          $ref: "#/responses/403"
        429:
          $ref: "#/responses/429"
  /all-data:
    put:
      summary: Set all user's data on the broker system to the provided payload.
      description: |
        All of the user's data with caller's *identity* is wiped and reset to the payload.

        If transferring a *segment-key* with a public restricted identity (0 .. 9999), if the
        *segment-key* already exists at provided identity for a different *owner*, the message
        call fails with a 400 -- "datastore-key ownership conflict; segment-key @ identity already reserved".

        If the payload is malformated and cannot be imported the message call fails with a 
        400 -- "cannot process input", followed by additional optional verbiage.
      tags:
        - import/export
      parameters:
        - in: body
          name: import-export-payload
          schema:
            $ref: "#/definitions/ImportExportPayload"
      security:
        - Authorization Header: []
      consumes:
        - application/json
      responses:
        200:
          description: |
            Data successfully set.
        400:
          $ref: "#/responses/400"
        403:
          $ref: "#/responses/403"
        429:
          $ref: "#/responses/429"
    post:
      summary: Set all user's data on the broker system from the provided peer-id.
      description: |
        All of the user's data with caller's *identity* is wiped and reset to data available at the 
        same *identity* on another broker.  The exporting broker is identified by the provided
        *peer-id*.  Both brokers must be able to exchange data on the network as identified by *type-key*.

        The reciprocal of this setter is the [peer-ids getter](#operation--peer-ids-get) to be called
        against the source broker instance.

        If transferring a *segment-key* with a public restricted identity (0 .. 9999), if the
        *segment-key* already exists at provided identity for a different *owner*, the message
        call fails with a 400 -- "datastore-key ownership conflict; segment-key @ identity already reserved".

        If the *type-key* requested is not supported by this broker system the message call fails with
        a 400 -- "invalid type-key, doesn't match broker system capabilities".

        If the *peer-id* cannot be reached or in otherwise unavailable the message call fails with a 
        400 -- "cannot reach peer".

        If the payload from the other broker is malformated and cannot be imported the message call fails 
        with a 400 -- "cannot process input", followed by additional optional verbiage.
      tags:
        - import/export
      parameters:
        - in: path
          name: type-key
          required: true
          description: |
            A *type-key* as per [enumertion](#definition-PeerId).
          type: string
        - in: path
          name: peer-id
          required: true
          description: |
            A *peer-id* on the *type-key* network of the source of import data.  Retrieve this using
            [peer-ids getter](#operation--peer-ids-get) on the exporting broker instance.
          type: string
      security:
        - Authorization Header: []
      consumes:
        - application/json
      responses:
        200:
          description: |
            Data successfully set.
        400:
          $ref: "#/responses/400"
        403:
          $ref: "#/responses/403"
        429:
          $ref: "#/responses/429"
    get:
      summary: Get all user's data from the broker system.
      description: |
        Get all of the caller's data, based on *identity* passed in.
      tags:
        - import/export
      security:
        - Authorization Header: []
      produces:
        - application/json
      responses:
        200:
          $ref: "#/definitions/ImportExportPayload"
        400:
          $ref: "#/responses/400"
        403:
          $ref: "#/responses/403"
        429:
          $ref: "#/responses/429"
    delete:
      summary: Delete all user's data on the broker system.
      description: |
        Delete all user's data on the broker system, based on *identity* passed in.
      tags:
        - import/export
      security:
        - Authorization Header: []
      responses:
        200:
          description: |
            If all data is deleted.
        400:
          $ref: "#/responses/400"
        403:
          $ref: "#/responses/403"
        429:
          $ref: "#/responses/429"
  /peer-ids:
    get:
      summary: Retrieve this broker's peer-ids.
      description: |
        Returns the *peer-ids* of this broker; allows other brokers to identify this broker
        as source of import data. Useful in cases when this broker's data could be imported directly 
        by another broker--through whatever transports available to both this broker and the importing
        broker.

        The reciprocal of this getter is the [all-data import POST](#operation--all-data-post).
      tags:
        - import/export
      security:
        - Authorization Header: []
      produces:
        - application/json
      responses:
        200:
          description: |
            List of *type-key*, *peer-id* pairs.  Each *peer-id* is mapped to a *type-key*.  
            A *type-key* identifies the type of peer network the *peer-id* is for.  
          schema:
            type: array
            items:
              $ref: "#/definitions/PeerId"
        400:
          $ref: "#/responses/400"
        403:
          $ref: "#/responses/403"
        429:
          $ref: "#/responses/429"  
definitions:
  PeerId:
    type: object
    required:
      - type-key
      - peer-id
    properties:
      type-key:
        type: string
        enum: [ipns-ri]
        description: |
          Identifies the network this peer ID is for.

          Type      | Notes
          ---       | ---
          ipns-ri   | An [*overhide* reference implementation](https://github.com/JakubNer/overhide-broker) peer as per [using IPNS](https://github.com/JakubNer/overhide/blob/master/docs/decentralization.md)
      peer-id:
        type: string
        description: |
          The peer identifier for given network.
  Transaction:
    type: object
    required:
      - transaction-value
      - transaction-date
    properties:
      transaction-value:
        type: number
        description: |
          Value of the transaction.
      transaction-date:
        type: string
        description: |
          Date-time timestamp of the transaction.

          The date-time is a string in [ISO 8601/RFC3339 format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14).
  RemunerationProvider:
    type: object
    required:
      - key
      - broker-address
      - description-md
    properties:
      key:
        type: string
        description: |
          Remuneration provider identifying key string.
      broker-address:
        type: string
        description: |
          This broker's specific public payment address with the reumneration
          provider.  This is the public address to which a subscription payment
          needs to be made from a user [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md).
      description-md:
        type: string
        description: |
          Description Markdown formatted text for this remuneration provider.
          Can have links and other markdown directing user to more information
          about this remuneration provider.
  RemunerationTier:
    type: object
    required:
      - key
      - description-md
    properties:
      key:
        type: string
        description: |
          Remuneration provider's tier identifying key string.
      description-md:
        type: string
        description: |
          Description Markdown formatted text for this remuneration tier.
          Can have links and other markdown directing user to more information
          about this remuneration provider tier.
  Authorities:
    type: object
    required:
      - read-rate
      - write-rate
      - storage-used
      - storage-limit
      - active-until
      - available-until
    properties:
      read-rate:
        type: integer
        description: |
          Maximum amount of data allowed to be read per unit time for the provided
          identity:  in bytes/hour.

          If client's read-rate is reached within an hour, reads are throttled.
          Throttling is broker implementation specific.

          If negative, the rate is unlimited.
      write-rate:
        type: integer
        description: |
          Maximum amount of data allowed to be written per unit time for the provided
          identity: in bytes/hour.

          If client's write-rate is reached within an hour, writes are throttled.
          Throttling is broker implementation specific.

          If negative, the rate is unlimited.
      storage-used:
        type: integer
        description: |
          Amount of data in bytes stored by this *identity* on this broker system.
      storage-limit:
        type: integer
        description: |
          Maximum amoun tof data in bytes that can be stored by this *identity* on this
          broker system at the current subscription level.

          If negative, storage is unlimited.
      active-until:
        type: string
        description: |
          Date-time until when this *identity* has an 'active' subscription at the currently
          authorized level.

          It's possible once this subscription level expires the *identity* continues to
          hava a subscription at a reduced level.  A subscription level expiry indicates
          some remuneration provider transaction to the broker has lapsed.  The  remuneration provider
          might indicate other transactions to the broker that haven't expired.

          The date-time is a string in [ISO 8601/RFC3339 format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14).

          A 'null' value indicates no expiry of current subscription level.
      available-until:
        type: string
        description: |
          Date-time until when data belonging to this *identity* will be retained within the
          broker system.

          The date-time is a string in [ISO 8601/RFC3339 format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14).

          A 'null' value indicates no expiry; data retained indefinitely.
  DatastoreKeySettings:
    type: object
    required:
      - allow-write
      - allowed-writers
      - allow-publish
      - allowed-publishers
    properties:
      allow-write:
        type: string
        enum: [self, signed]
        description: |
          Indicate who is allowed to write to the *datastore-key*.  The "self" value is default and means only owner of *segment-key* has write rights.

          Value of "signed" indicates *allowed-writers* property must necessairly list public keys to identify *user-addresses* allowed to write into this *segment-key*.  Other users using this broker system attempting to write to this *segment-key* have their *authentication token* checked against the *user-addresses* in *allowed-writers* list.
      allowed-writers:
        type: array
        items:
          type: object
          required:
            - address
            - remuneration-key
          properties:
            address:
              type: string
              description: |
                public key (address) identifying user allowed to write data
            remuneration-key:
              type: string
              description: |
                One of the remuneration provider keys from /capabilities/remuneration-providers

                The provided address corresponds to one of the remuneration providers, define it.
        description: |
          If *allow-write* is "self" this parameter is ignored.

          If *allow-write* is "signed", this parameter is a list of public keys to identify users allowed to write data to this *datastore-key* (*segment-key* @ *identity*).

          Other users using this broker system attempting to write to this *segment-key* have their *authentication token* checked against the *user-addresses* in this list.
      allow-publish:
        type: string
        enum: [self, any, signed]
        description: |
          Indicate who is allowed to publish messages to the *datastore-key*'s backchannel'.  The "self" value is default and means only owner of *segment-key* has publish rights.

          Value of "signed" indicates *allowed-publishers* property must necessairly list public keys to identify *user-addresses* allowed to publish messages into this *segment-key*.  Other users using this broker system attempting to publish messages to this *segment-key* have their *authentication token* checked against the *user-addresses* in *allowed-publishers* list.
      allowed-publishers:
        type: array
        items:
          type: object
          required:
            - address
            - remuneration-key
          properties:
            address:
              type: string
              description: |
                public key (address) identifying user allowed to publish
            remuneration-key:
              type: string
              description: |
                One of the remuneration provider keys from /capabilities/remuneration-providers

                The provided address corresponds to one of the remuneration providers, define it.
        description: |
          if *allow-publish* is "self" or "any" this parameter is ignored.

          If *allow-publish* is "signed", this parameter is a list of public keys to identify users allowed to publish messages to this *datastore-key* (*segment-key* @ *identity*).

          Other users using this broker system attempting to publish to this *segment-key* have their *authentication token* checked against the *user-addresses* in this list.
  Message:
    type: object
    required:
      - seq-id
      - message
    properties:
      seq-id:
        type: integer
        description: |
          Consecutivelly increasing message sequence ID
      message:
        type: string
        description: |
          The message byte stream base64 encoded.
  Event:
    type: object
    description: |
      Events coming through the websocket connection will be extentions of this *Event* type:

      * [Event--NewMessage](#definition-Event--NewMessage)
    required:
      - type
    properties:
      type:
        type: string
        enum: [new-message]
  Event--NewMessage:
    allOf:
      - $ref: "#/definitions/Event"
      - type: object
        required:
          - seq-id
        properties:
          seq-id:
            type: integer
            description: |
              *seq-id* of most recent message left on the broker system.
  ImportExportPayload:
    type: object
    required:
      - settings
      - values
      - messages
    properties:
      settings:
        type: array
        items:
          type: object
          description: |
            Settings for datastore-key to transfer.
          required:
            - segment-key
            - settings
          properties:
            segment-key:
              type: string
              description: |
                See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#segment-key).
            identity:
              type: string
              description: |
                Optional identity.  If provided, must be one of public restricted identities:  0 .. 9999.  If not provided, identity is that of token owner.

                See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#identity).
            settings:
              $ref: "#/definitions/DatastoreKeySettings"
      values:
        type: array
        items:
          type: object
          description: |
            Datastore values to transfer.
          required:
            - segment-key
            - bytes
          properties:
            segment-key:
              type: string
              description: |
                See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#segment-key).
            identity:
              type: string
              description: |
                Optional identity.  If provided, must be one of public restricted identities:  0 .. 9999.  If not provided, identity is that of token owner.

                See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#identity).
            bytes:
              type: string
              description: |
                The data byte stream base64 encoded.
      messages:
        type: array
        items:
          type: object
          description: |
            All messages from the backchannel at the givent datastore-key

            Messages enqueued at *datastore-key* (segment-key @ identity) in increasing *seq-id* order.

            Messages are in order of consecutivelly increasing message sequence ID (*seq-id*).  The message sequence IDs are internal system identifiers for the messages furnished by this *datastore-key*, they're unique to this *datastore-key* and consecutive.
          required:
            - segment-key
            - messages
          properties:
            segment-key:
              type: string
              description: |
                See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#segment-key).
            identity:
              type: string
              description: |
                Optional identity.  If provided, must be one of public restricted identities:  0 .. 9999.  If not provided, identity is that of token owner.

                See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#identity).
            messages:
              type: array
              items:
                $ref: "#/definitions/Message"

responses:
  400:
    description: |
      A bad request from the client results in one or more of the following error message strings.

      The message enum might be extended by broker system.
    schema:
      type: array
      items:
        type: string
        enum:
          - invalid remuneration-key, doesn't match broker system capabilities
          - address incompatible with remuneration provider
          - invalid signature
          - invalid datastore-key requested; segment-key or identity mismatch
          - datastore-key ownership conflict; segment-key @ identity already reserved
          - invalid type-key, doesn't match broker system capabilities
          - cannot reach peer
          - cannot process input
  401:
    description: |
      For an endpoint protected with the [token security definition](#security-definition-Authorization Header), an "Authorization" header was not provided a valid token--as returned from the [authenticate endpoint](#operation--auth-authenticate-put).
  403:
    description: |
      The *identity* is valid, authenticated, with proper authorizations, but:

      1. the *identity* has no write or publish access to the valid *datastore-key*.
      1. the API request would exceed rates and limits as set out within the authorities at the current subscription plan.

      Results in one or more of the following error message strings.

      The message enum might be extended by broker system.

      Broker systems might not throw up this response when read and write rates are exceeded.  Instead a broker system might start throttling responses or responding at a lower-priority.
    schema:
      type: array
      items:
        type: string
        enum:
          - no write access
          - no publish access
          - storage limit exceeded
          - read-rate exceeded
          - write-rate exceeded
  409:
    description: |
      Go play a lottery:  the generated identity conflicts with some other identity or ended up being a restricted number <10000.

      *User-address* hashed with its *secret-phrase* must be unique within the system.  Another *user-address*/*secret-phrase* already in the system hashes to the same hash as the provided *user-address*/*secret-phrase*.

      Try a different *secret-phrase*.
  429:
    description: |
      Client is calling the API too frequently.

      Conditions for this response to occur are broker system dependant.
securityDefinitions:
  Authorization Header:
    type: apiKey
    in: header
    name: Authorization
    description: |
      Retrieve an authentication token using the [authentication endpoint](#path--auth-authenticate).
      The returned token must be provided in an "Authorization" header
      to API calls secured with this security definition.

      The token is whitelisted by the *overhide* broker until revoked or expired (at broker's purview).  The token contains *identity* and *user-address* hashes to help with access control.  Details in the [*identity write-up*](https://github.com/JakubNer/overhide/blob/master/docs/identity.md#authenticated-sessions).
  Authorization Query:
    type: apiKey
    in: query
    name: auth
    description: |
      Same as the Authorization Header security scheme except token is passed in a query parameter named *auth*.
externalDocs:
  description: overhide documentation
  url: 'https://pages.github.com/JakubNer/overhide'
