swagger: '2.0'
host: overhide.io
basePath: /broker
schemes:
  - https
  - wss
info:
  description: |
    This is the API contract expected to be exposed by an overhide "broker".  This API is represented by the green "broker API" connector in the overhide component model:

    ![overhide component model](https://github.com/JakubNer/overhide/raw/master/docs/images/provided.png)

    Read this API with reference to the [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md).

    ***
      A note on schemes used in the API.  
      
      Operations *GET*, *PUT*, *POST*, *DELETE* use the HTTPS scheme.  These endpoints should be understood as standard REST requests.  These configuration/discovery exchanges involve text parameters on the URL line and text/numeric payloads in the JSON representation.  They have URL encoded parameters on the URL line and use BASE64 encoding for some JSON attributes.  The BASE64 encoding is explicitly stated.

      Operations *WIRE* are WebSocket events that use a custom wire protocol.  The SSL secured WebSockets connection is to the same address as the HTTPS connection.  
    ***
      A note on the wire-protocol payload notation.  
      
      WSS event exchanged payloads are comprised of compact byte streams.  In the documentation payloads with compact byte streams are described as descriptors in the following format:

      | *syntax *    | *bytes* | *value* |
      | ---          | ---     | ---     |
      | foo          | 2       |         |
      | bar          | 1       | N       |
      | for i in N { |         |         |
      |   baz        | 4       |         |
      | }            |         | ``      |
              
      The above indicates that the first 3 bytes are followed by a loop of 4 byte words.  The number of iteration is specified by bits 16-23.

      All numeric values greater than a byte are sent in network order, big-endian format.  The *foo* above is 2-bytes wide, the first byte having the most significant bits.
    ***
  version: 1.0.0
  title: Overhide Broker API
  contact:
    email: info@overhide.io
  license:
    name: MIT License
    url: 'https://pages.github.com/JakubNer/overhide/blob/master/LICENSE'
tags:
  - name: capabilities
    description: |
      Discover capabilities of the overhide broker system.
      * subscription providers
      * subscription tiers
  - name: auth
    description: |
      Authentication, authorization, and credential management:

      * authenticate providing an [access token](#security-definition-Authorization Header): authenticate subscribers of 
        the system and invitees of subscribers of the system.
      * work with  authority levels.
      * change *identity* credentials.  Setting *identity* for the first time is
      done with the [authenticate endpoint](#path--auth-authenticate).
      * work with subscription details for a supported remuneration API and a
      given *identity*.
  - name: data
    description: |
      Data key-value CRUD operations; modifying data values in *datastore-keys*.
  - name: backchannel queues
    description: |
      Publishing messages to backchannel queues, subscribing to notifications, and de-queueing the messages.
  - name: delegate
    description: |
      Delegate data in a *segment-key* is data qualified by an [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) that is different from the owner.

      Each delegate keeps their data completely separate from other delegates under the same *segment-key*.

      Delegates may be alloted delegated *backchannel-queues*:  these are qualified via *delegate* query parameters on [the backchannel endpoints](#tag-backchannel-queues)
  - name: datastore-key settings
    description: |
      Setting access metadata for *datastore-keys*.
  - name: import/export
    description: |
      Batch import and export of all user's data and messages.

      Envisioned use cases include backup and broker transfer.
paths:
  /capabilities/remuneration-providers:
    get:
      summary: List of remuneration providers supported.
      description: |
        Mapping of remuneration providers to the broker's public address for given
        provider.
      tags:
        - capabilities
      operationId: getRemunerationProviders
      produces:
        - application/json
      responses:
        200:
          description: |
            Array of objects each defining one remuneration provider mapping.
          schema:
            type: array
            items:
              $ref: "#/definitions/RemunerationProvider"
        429:
          $ref: "#/responses/429"
  /capabilities/remuneration-tiers/{remuneration-key}:
    get:
      summary: List of subscription tiers available.
      description: |
         List of subscription tiers available for this broker from a given
         remuneration provider.
      tags:
        - capabilities
      operationId: getRemunerationTiers
      parameters:
        - in: path
          name: remuneration-key
          required: true
          description: |
            One of the remuneration provider keys from */capabilities/remuneration-providers*
          type: string
      produces:
        - application/json
      responses:
        200:
          description: |
            Array of objects each defining one remuneration tier mapping.
          schema:
            type: array
            items:
              $ref: "#/definitions/RemunerationTier"
        400:
          $ref: "#/responses/400"
        429:
          $ref: "#/responses/429"
  /auth/authenticate:
    put:
      summary: Authenticate an [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) returning a token.
      description: |
        Authenticate an [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) returning a token to be used for [token
        authentication](#security-definition-Authorization Header) in the rest of the API.
      tags:
        - auth
      parameters:
        - in: body
          name: authentication
          description: |
            Authentication parameters.
          schema:
            type: object
            required:
              - remuneration-key
              - secret-phrase
              - user-address
              - secret-phrase-signed
            properties:
              remuneration-key:
                type: string
                description: |
                  Key from remuneration-providers which contains subscription payment(s) from the
                  provided *user-address* to this broker's *broker-address*.

                  Must be one of the remuneration provider keys from this broker's [capabilities](#operation--capabilities-remuneration-providers-get).
              secret-phrase:
                type: string
                description: |
                  BASE64 encoded.

                  A secret phrase for the specified user-address.  Once a user authenticates against the broker with a secret-phrase and a user-address, the secret-phrase is tied to the user-address indefinitely, unless changed by [change-credentials](#operation--auth-change-credentials-put).
              user-address:
                type: string
                description: |
                  A public user-addressÂ to verify an active subscription to this broker's broker-address.

                  Must be an address for the remuneration provider indicated in *remuneration-key*.
              secret-phrase-signed:
                type: string
                description: |
                  The *secret-phrase* provided above signed with the private key corrsponding to the
                  *user-address*.

                  The signature uses Bitcoin's ECDSA curve - secp256k1.
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: |
            Authentication token is returned to be used in subsequent calls into
            overhide broker.
          schema:
            type: string
        400:
          $ref: "#/responses/400"
        402:
          description: |
            Payment Required -- Remuneration provider indicates insufficient transactions to the broker system to meet a
            service tier subscription requirements.

            See [subscriptions write-up](https://github.com/JakubNer/overhide/blob/master/docs/identity.md#subscriptions).
        409:
          $ref: "#/responses/409"
        429:
          $ref: "#/responses/429"
  /auth/get-authorities:
    get:
      summary: Retrieves authorities for an [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md).
      description: |
        Retrieve authorities for an [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md).  Authorities are rates and limits as specified by [the *Authorities* return object](#definition-Authorities).

        If an *identity* has multiple transactions with a reumneration provider, the transactions are added to yield the best service tier.

        Authorities are valid for the duration of the [security token](#security-definition-Authorization Header).

        See [identities write-up](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) for more information.
      tags:
        - auth
      security:
        - Authorization Header: []
      produces:
        - application/json
      responses:
        200:
          description: |
            Authorized rates and limits are returned.
          schema:
            $ref: "#/definitions/Authorities"
        401:
           $ref: "#/responses/401"
        429:
          $ref: "#/responses/429"
  /auth/bounce:
    put:
      summary: Authenticate an invitee's user-address as a guest of a subscriber's user-address.
      description: |
        Authenticate an invitee's user-address as a guest of a subscriber's user-address.

        An invitee into the system must provide a valid address on an [accepted remuneration provider](#operation--capabilities-remuneration-providers-get).  An invitee must prove ownership of said valid address.

        Transactions--on a supported remuneration-provider--from the *invitee-user-address* to the provided *inviter-user-address* are part of the state of the returned access token by this call.  The *inviter* may set [fee expectations](#definition-DatastoreKeySettings) on *segment-keys*.  If fees paid are expected, the *invitee* must necessairly have transacted with the *inviter*.

        The inviting subscriber must expose their *user-address* and a *shared-phrase* that's used to hash their *user-address*
        into an [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md).  The *shared-phrase* is equivalent to the
        *secret-phrase* passed into the [authenticate endpoint](#operation--auth-authenticate-put): except it's not kept secret by the 
        inviting user.  This is necessary to authorize the invitee to the inviting subscriber, and to ensure the inviting subscriber's 
        *user-address* does in fact hash to the desired indentity: we don't want to just pass the inviting subscriber's [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md),
        we want to calculate it.

        Returns an "invitee" token to be used for [token authentication](#security-definition-Authorization Header) in the rest of the API.

        The *invitee-user-address*  hashed by *invitee-secret-phrase* is the invitee's [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md)
        for the purposes of [write/publish permissions](#definition-DatastoreKeySettings) on *segment-keys*.
      tags:
        - auth
      parameters:
        - in: body
          name: authentication
          description: |
            Authentication parameters.
          schema:
            type: object
            required:
              - remuneration-key
              - shared-phrase
              - inviter-user-address
              - invitee-secret-phrase
              - invitee-user-address
              - invitee-secret-phrase-signed
            properties:
              remuneration-key:
                type: string
                description: |
                  Key from remuneration-providers which contains subscription payment(s) from the
                  provided *user-address* to this broker's *broker-address*.

                  Must be one of the remuneration provider keys from this broker's [capabilities](#operation--capabilities-remuneration-providers-get).
              shared-phrase:
                type: string
                description: |
                  BASE64 Encoded.

                  A shared phrase by the inviter to the invitee for the specified inviter-user-address.  The *shared-phrase* and the *inviter-user-address*
                  must compute to an authorized [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) on the system.  This is
                  the identity inviting the invitee.
              inviter-user-address:
                type: string
                description: |
                  A public user-addressÂ to verify an active subscription to this broker's broker-address.

                  Must be an address for the remuneration provider indicated in *remuneration-key*.

                  Used in combination with *shared-phrase*, see *shared-phrase* above.
              invitee-secret-phrase:
                type: string
                description: |
                  BASE64 Encoded.

                  A secret phrase for the specified *invitee-user-address*.
              invitee-user-address:
                type: string
                description: |
                  A public user-address, must be an address for the remuneration provider indicated in *remuneration-key*.

                  Transactions from this address to *inviter-user-address* are stored in the returned access token to [check fees](#definition-DatastoreKeySettings) on invitee-accessed *segment-keys*.
              invitee-secret-phrase-signed:
                type: string
                description: |
                  The *invitee-secret-phrase* provided above signed with the private key corrsponding to the
                  *invitee-user-address*.

                  The signature uses Bitcoin's ECDSA curve - secp256k1.
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: |
            Invitee authentication token is returned to be used in subsequent calls into
            overhide broker.
          schema:
            type: string
        400:
          $ref: "#/responses/400"
        402:
          description: |
            Payment Required -- Remuneration provider indicates no transactions exist between the user addresses in parameters.

            See [subscriptions write-up](https://github.com/JakubNer/overhide/blob/master/docs/identity.md#subscriptions).
        409:
          $ref: "#/responses/409"
        429:
          $ref: "#/responses/429"
  /auth/change-credentials:
    put:
      summary: Change authentication of token's user.
      description: |
      tags:
        - auth
      parameters:
        - in: body
          name: new-authentication
          description: |
            New authentication credentials for user indicated by the *identity* in the [security header](#security-definition-Authorization Header).
          schema:
            type: object
            required:
              - new-remuneration-key
              - new-secret-phrase
              - new-user-address
              - new-secret-phrase-signed
            properties:
              new-remuneration-key:
                type: string
                description: |
                  Key from remuneration-providers which contains subscription payment(s) from the
                  provided *new-user-address* to this broker's *broker-address*.

                  Must be one of the remuneration provider keys from this broker's [capabilities](#operation--capabilities-remuneration-providers-get).
              new-secret-phrase:
                type: string
                description: |
                  BASE64 Encoded.

                  A new secret phrase for the new user-address.  Once credentials are changed successfully; the *new-secret-phrase* is tied to the *new-user-address* indefinitely, unless changed again by [change-credentials](#operation--auth-change-credentials-put).
              new-user-address:
                type: string
                description: |
                  A public user-addressÂ to verify an active subscription to this broker's broker-address.

                  Must be an address for the remuneration provider indicated in *new-remuneration-key*.
              new-secret-phrase-signed:
                type: string
                description: |
                  The *new-secret-phrase* provided above signed with the private key corrsponding to the
                  *new-user-address*.

                  The signature uses Bitcoin's ECDSA curve - secp256k1.
      security:
        - Authorization Header: []
      consumes:
        - application/json
      responses:
        200:
          description: |
            Credentials successfully changed.
        400:
          $ref: "#/responses/400"
        401:
           $ref: "#/responses/401"
        409:
          $ref: "#/responses/409"
        429:
          $ref: "#/responses/429"
  /auth/get-transactions/{remuneration-key}/{from-address}/{to-address}:
    get:
      summary: Retrieve remuneration transactions.
      description: |
        Retrieve the latest remuneration transactions on *remuneration-key* from *from-address* to *to-address*
      tags:
        - auth
      parameters:
        - in: path
          name: remuneration-key
          required: true
          description: |
            Key from remuneration-providers which contains payment(s) from the
            provided *from-address* to the provided *to-address*.

            Must be one of the remuneration provider keys from this broker's [capabilities](#operation--capabilities-remuneration-providers-get).
          type: string
        - in: path
          name: from-address
          required: true
          description: |
            A public addressÂ from which to verify payment details (amount/date) to the *to-address*.

            Must be an address from the remuneration provider indicated in *remuneration-key*.
          type: string
        - in: path
          name: to-address
          required: true
          description: |
            The target public addressÂ to check for payment made.

            Must be an address from the remuneration provider indicated in *remuneration-key*.

            This could be this broker system's public payment address with
            the reumneration provider (as retrieved via [remuneration provider](#definition-RemunerationProvider)).

            This could be any other public address furnished by the remuneration provider, e.g.
            the service's public address: to check for app purchase etc.
          type: string
        - in: query
          name: max-most-recent
          required: false
          type: integer
          description: |
            Number of most recent transactions to retrieve.
        - in: query
          name: since
          required: false
          type: string
          description: |
            Retrieve transactions since this date-time (inclusive) until now.

            The date-time is a string in [ISO 8601/RFC3339 format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14).
      security:
        - Authorization Header: []
      produces:
        - application/json
      responses:
        200:
          description: |
            List of transactions.
          schema:
            type: array
            items:
              $ref: "#/definitions/Transaction"
        400:
          $ref: "#/responses/400"
        401:
           $ref: "#/responses/401"
        409:
          $ref: "#/responses/409"
        429:
          $ref: "#/responses/429"
  set data:
    options:
      summary: Set value of datastore-key.
      description: |
        Payload contents is written as a new value into *datastore-key* (segment-key @ identity).

        For the *set* to succeed the *datastore-key* (segment-key @ identity) must
        either be brand new of already owned by authorization token owner.
      tags:
        - data
      parameters:
        - in: body
          name: payload
          description: |

            | *syntax*        | *bytes* | *value* |
            | ---             | ---     | ---     |
            | req-id          | 8       |         |
            | len             | 8       | SL + IL + length(payload) + 3 |
            | opcode          | 1       | 0x01    |
            | segment-key-len | 1       | SL == length(segment-key) |
            | segment-key     | SL      |         |
            | identity-len    | 1       | IL == length(identity) |
            | identity        | IL      |         |
            | payload         | *       | ``      |
          schema:
            type: object
            required:
              - req-id
              - len
              - opcode
              - segment-key-len
              - segment-key
              - identity-len
              - payload
            properties:
              req-id:
                type: number
                description: |
                  Request ID: a connection specific unique identifier of the request/responses.  Has no meaning beyond connection.
              len:
                type: bytes
                description: |
                  Number of bytes of the whole message:  length(auth) + length(segment-key) + length(identity) + length(payload) + 11.
              opcode:                  
                type: bytes
                description: |
                  Operation code.
              segment-key-len:
                type: number
                description: |
                  Number of bytes for *segment-key*.
              segment-key:
                type: bytes
                description: |
                  See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#segment-key).
              identity-len:
                type: number
                description: |
                  Number of bytes for *identity*.
              identity:
                type: bytes
                description: |
                  Optional identity.  If not provided, identity is that of token owner.

                  See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#identity).
              payload:
                type: bytes
                description: |
                  The payload byte-stream.
      consumes:
        - application/octet-stream
      produces:
        - application/octet-stream
      security:
        - Authorization WSS: []
      responses:
        RESPONSE:
          $ref: "#/responses/WIRE"
        code == 200:
          description: |
            Success.  Empty.
        code == 400:
          $ref: "#/responses/400"
        code == 403:
          $ref: "#/responses/403"
        code == 429:
          $ref: "#/responses/429"
  get data:
    options:
      summary: Get value of datastore-key.
      description: |
        Get value of *datastore-key* (segment-key @ identity).
      tags:
        - data
      parameters:
        - in: body
          name: payload
          description: |

            | *syntax*        | *bytes* | *value* |
            | ---             | ---     | ---     |
            | req-id          | 8       |         |            
            | len             | 8       | SL + IL + 3 |
            | opcode          | 1       | 0x02    |
            | segment-key-len | 1       | SL == length(segment-key) |
            | segment-key     | SL      |         |
            | identity-len    | 1       | IL == length(identity) |
            | identity        | IL      | ``      |
          schema:
            type: object
            required:
              - req-id
              - len
              - opcode
              - segment-key-len
              - segment-key
              - identity-len
            properties:
              req-id:
                type: number
                description: |
                  Request ID: a connection specific unique identifier of the request/responses.  Has no meaning beyond connection.
              len:
                type: bytes
                description: |
                  Number of bytes of the whole message:  length(auth) + length(segment-key) + length(identity) + 11.
              opcode:                  
                type: bytes
                description: |
                  Operation code.
              segment-key-len:
                type: number
                description: |
                  Number of bytes for *segment-key*.
              segment-key:
                type: bytes
                description: |
                  See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#segment-key).
              identity-len:
                type: number
                description: |
                  Number of bytes for *identity*.
              identity:
                type: bytes
                description: |
                  Optional identity.  If not provided, identity is that of token owner.

                  See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#identity).
      consumes:
        - application/octet-stream
      produces:
        - application/octet-stream
      security:
        - Authorization WSS: []
      responses:
        RESPONSE:
          $ref: "#/responses/WIRE"
        code == 200:
          description: |
            The value of *datastore-key* (segment-key @ identity).
        code == 400:
          $ref: "#/responses/400"
        code == 403:
          $ref: "#/responses/403"
        code == 429:
          $ref: "#/responses/429"
  delete data:
    options:
      summary: Delete datastore-key.
      description: |
        Delete *datastore-key* (segment-key @ identity).  The *datastore-key* must be
        owned by the token owner.
      tags:
        - data
      parameters:
        - in: body
          name: payload
          description: |

            | *syntax*        | *bytes* | *value* |
            | ---             | ---     | ---     |
            | req-id          | 8       |         |
            | len             | 8       | SL + IL + 3 |
            | opcode          | 1       | 0x03    |
            | segment-key-len | 1       | SL == length(segment-key) |
            | segment-key     | SL      |         |
            | identity-len    | 1       | IL == length(identity) |
            | identity        | IL      | ``      |
          schema:
            type: object
            required:
              - req-id
              - len
              - opcode
              - segment-key-len
              - segment-key
              - identity-len
            properties:
              req-id:
                type: number
                description: |
                  Request ID: a connection specific unique identifier of the request/responses.  Has no meaning beyond connection.
              len:
                type: bytes
                description: |
                  Number of bytes of the whole message:  length(auth) + length(segment-key) + length(identity) + length(payload) + 11.
              opcode:                  
                type: bytes
                description: |
                  Operation code.
              segment-key-len:
                type: number
                description: |
                  Number of bytes for *segment-key*.
              segment-key:
                type: bytes
                description: |
                  See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#segment-key).
              identity-len:
                type: number
                description: |
                  Number of bytes for *identity*.
              identity:
                type: bytes
                description: |
                  Optional identity.  If not provided, identity is that of token owner.

                  See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#identity).
      consumes:
        - application/octet-stream
      produces:
        - application/octet-stream
      security:
        - Authorization WSS: []
      responses:
        RESPONSE:
          $ref: "#/responses/WIRE"
        code == 200:
          description: |
            Success.  Empty.
        code == 400:
          $ref: "#/responses/400"
        code == 403:
          $ref: "#/responses/403"
        code == 429:
          $ref: "#/responses/429"
  post message:
    options:
      summary: Enqueue a message to a given datastore-key backchannel.
      description: |
        Enqueue a message to a given *datastore-key* (*segment-key* @ *identity*) backchannel.

        If the *datastore-key*'s *allow-publish* setting is "self", the *identity* in the authentication token must match the *datastore-key* owner.

        If the *datastore-key*'s *allow-publish* setting is "signed", the author of the backchannel message is the *identity* tied ot the authorization token passed to this API.  Message author's public-key (hash) is present in the token and compared to the *allowed-publishers* list--if any--for this *datastore-key*.

        If the *datastore-key*'s *allow-publish* setting is "any", the *identity* in the authentication token must simply be valid: a valid broker system user is publishing.

        See the [settings getter](#operation--settings--segment-key--get) for the above settings.
      tags:
        - backchannel queues
      parameters:
        - in: body
          name: payload
          description: |

            | *syntax*        | *bytes* | *value* |
            | ---             | ---     | ---     |
            | req-id          | 8       |         |
            | len             | 8       | SL + IL + DL + length(payload) + 4 |
            | opcode          | 1       | 0x04    |
            | segment-key-len | 1       | SL == length(segment-key) |
            | segment-key     | SL      |         |
            | identity-len    | 1       | IL == length(identity) |
            | identity        | IL      |         |
            | delegate-len    | 1       | DL == length(delegate) |
            | delegate        | DL      |         |
            | payload         | *       | ``      |
          schema:
            type: object
            required:
              - req-id
              - len
              - opcode
              - segment-key-len
              - segment-key
              - identity-len
              - delegate-len
              - payload
            properties:
              req-id:
                type: number
                description: |
                  Request ID: a connection specific unique identifier of the request/responses.  Has no meaning beyond connection.
              len:
                type: bytes
                description: |
                  Number of bytes of the whole message:  length(auth) + length(segment-key) + length(identity) + length(payload) + 11.
              opcode:                  
                type: bytes
                description: |
                  Operation code.
              segment-key-len:
                type: number
                description: |
                  Number of bytes for *segment-key*.
              segment-key:
                type: bytes
                description: |
                  See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#segment-key).
              identity-len:
                type: number
                description: |
                  Number of bytes for *identity*.
              identity:
                type: bytes
                description: |
                  Optional identity.Â Â If provided, must be complimentary to the *delegate* parameter, glob '*', or one of public restricted identities:Â Â 0 .. 9999.Â Â If not provided, identity is that of token owner.

                  The '*' glob value means the message is posted to all delegates:  it's enqueued on all their queues.

                  See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#identity).
              delegate-len:
                type: number
                description: |
                  Number of bytes for *delegate*.
              delegate:
                type: bytes
                description: |
                  Qualifies that this backchannel message is meant for a [delegate](#tag-delegate) of *segment-key*.  The value is the delegate's [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md).

                  If this parameter is present, the *identity* query parameter is mandatory.  The *segment-key*
                  from the path and this *identity* from the query constitute the *datstore-key*.

                  The *delegate* must satisfy [settings on the *segment-key*](#definition-DatastoreKeySettings) to publish mesages.
              payload:
                type: bytes
                description: |
                  The payload byte-stream.
      consumes:
        - application/octet-stream
      produces:
        - application/octet-stream
      security:
        - Authorization WSS: []
      responses:
        RESPONSE:
          $ref: "#/responses/WIRE"
        code == 200:
          description: |
            Success.  Empty.
        code == 400:
          $ref: "#/responses/400"
        code == 403:
          $ref: "#/responses/403"
        code == 429:
          $ref: "#/responses/429"
  fetch messages:
    options:
      summary: Retrieve all messages from the backchannel at the givent datastore-key.
      description: |
        Retrieve messages from the backchannel at the given *datastore-key* (*segment-key* @ *identity*).
      tags:
        - backchannel queues
      parameters:
        - in: body
          name: payload
          description: |

            | *syntax*        | *bytes* | *value* |
            | ---             | ---     | ---     |
            | req-id          | 8       |         |
            | len             | 8       | SL + IL + DL + 4 |
            | opcode          | 1       | 0x05    |
            | segment-key-len | 1       | SL == length(segment-key) |
            | segment-key     | SL      |         |
            | identity-len    | 1       | IL == length(identity) |
            | identity        | IL      |         |
            | delegate-len    | 1       | DL == length(delegate) |
            | delegate        | DL      | ``      |
          schema:
            type: object
            required:
              - req-id
              - len
              - opcode
              - segment-key-len
              - segment-key
              - identity-len
              - delegate-len
            properties:
              req-id:
                type: number
                description: |
                  Request ID: a connection specific unique identifier of the request/responses.  Has no meaning beyond connection.
              len:
                type: bytes
                description: |
                  Number of bytes of the whole message:  length(auth) + length(segment-key) + length(identity) + length(payload) + 11.
              opcode:                  
                type: bytes
                description: |
                  Operation code.
              segment-key-len:
                type: number
                description: |
                  Number of bytes for *segment-key*.
              segment-key:
                type: bytes
                description: |
                  See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#segment-key).
              identity-len:
                type: number
                description: |
                  Number of bytes for *identity*.
              identity:
                type: bytes
                description: |
                  Optional identity.Â Â If provided, must be complimentary to the *delegate* parameter or one of public restricted identities:Â Â 0 .. 9999.Â Â If not provided, identity is that of token owner.

                  See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#identity).
              delegate-len:
                type: number
                description: |
                  Number of bytes for *delegate*.
              delegate:
                type: bytes
                description: |
                  Qualifies that the messages are to be retrieved for a [delegate](#tag-delegate) of *segment-key*.  The value is the delegate's [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md).

                  If this parameter is present, the *identity* query parameter is mandatory.  The *segment-key*
                  from the path and this *identity* from the query constitute the *datstore-key*.

                  Only the *delegate* may retrieve these qualified mesages.
      consumes:
        - application/octet-stream
      produces:
        - application/octet-stream
      security:
        - Authorization WSS: []
      responses:
        RESPONSE:
          $ref: "#/responses/WIRE"
        code == 200:
          description: |
            Messages enqueued at *datastore-key* (segment-key @ identity) in increasing *seq-id* order.

            Messages are in order of consecutivelly increasing message sequence ID (*seq-id*).  The message sequence IDs are internal system identifiers for the messages furnished by this *datastore-key*, they're unique to this *datastore-key* and consecutive.

            Not all messages may be returned.  The response contains a count of messages still left with the broker system.  The *seq-id* of the most recent message returned (highest *seq-id*) plus the count of messages remaining, is the *seq-id* of most recent message left on the broker system.

            | *syntax*        | *bytes* | *value* |
            | ---             | ---     | ---     |
            | remaining-count | 4       |         |
            | loop {          |         |         |
            |   seq-id        | 4       |         |
            |   message-len   | 8       | ML = length(message) |
            |   message       | *       |         |
            | }               |         | ``      |

          schema:
            type: object
            required:
              - remaining-count
              - seq-id
              - message-len
              - message
            properties:
              remaining-count:
                type: integer
                description: |
                  Count of messages still left with the broker system.
            seq-id:
              type: number
              description: |
                Consecutivelly increasing message sequence ID        
            message-len:
              type: number
              description: |
                Number of bytes for *message*.
            message:
              type: bytes
              description: |
                The message byte stream value.
        code == 400:
          $ref: "#/responses/400"
        code == 403:
          $ref: "#/responses/403"
        code == 429:
          $ref: "#/responses/429"
  acknowledge:
    options:
      summary: Acknowledge all messages up to and including seq-id for given datastore-key.
      description: |
        Acknowledge all messages up to and including seq-id have been handled.  All messages up to seq-id will be removed from the backchannel.
      tags:
        - backchannel queues
      parameters:
        - in: body
          name: payload
          description: |

            | *syntax*        | *bytes* | *value* |
            | ---             | ---     | ---     |
            | req-id          | 8       |         |            
            | len             | 8       | SL + IL + DL + 8 |
            | opcode          | 1       | 0x06    |
            | segment-key-len | 1       | SL == length(segment-key) |
            | segment-key     | SL      |         |
            | identity-len    | 1       | IL == length(identity) |
            | identity        | IL      |         |
            | delegate-len    | 1       | DL == length(delegate) |
            | delegate        | DL      |         |
            | seq-id          | 4       | ``      |
          schema:
            type: object
            required:
              - req-id
              - len
              - opcode
              - segment-key-len
              - segment-key
              - identity-len
              - delegate-len
              - seq-id
            properties:
              req-id:
                type: number
                description: |
                  Request ID: a connection specific unique identifier of the request/responses.  Has no meaning beyond connection.
              len:
                type: bytes
                description: |
                  Number of bytes of the whole message:  length(auth) + length(segment-key) + length(identity) + length(payload) + 11.
              opcode:                  
                type: bytes
                description: |
                  Operation code.
              segment-key-len:
                type: number
                description: |
                  Number of bytes for *segment-key*.
              segment-key:
                type: bytes
                description: |
                  See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#segment-key).
              identity-len:
                type: number
                description: |
                  Number of bytes for *identity*.
              identity:
                type: bytes
                description: |
                  Optional identity.Â Â If provided, must be complimentary to the *delegate* parameter or one of public restricted identities:Â Â 0 .. 9999.Â Â If not provided, identity is that of token owner.

                  See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#identity).
              delegate-len:
                type: number
                description: |
                  Number of bytes for *delegate*.
              delegate:
                type: bytes
                description: |
                  Qualifies that this acknowledgment is meant for a [delegate](#tag-delegate) of *segment-key*.  The value is the delegate's [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md).

                  If this parameter is present, the *identity* query parameter is mandatory.  The *segment-key*
                  from the path and this *identity* from the query constitute the *datstore-key*.

                  Only the *delegate* may acknowledge these qualified mesages.
              seq-id:
                type: number
                description: |
                  *seq-id* up to which--inclusive--to acknowledge backchannel processing.
      consumes:
        - application/octet-stream
      produces:
        - application/octet-stream
      security:
        - Authorization WSS: []
      responses:
        RESPONSE:
          $ref: "#/responses/WIRE"
        code == 200:
          description: |
            Success.  Empty.
        code == 400:
          $ref: "#/responses/400"
        code == 403:
          $ref: "#/responses/403"
        code == 429:
          $ref: "#/responses/429"
  subscribe:
    options:
      summary:  Owner--identified in token--subscribes to notifications of new messages in datastore-key.
      description: |
        Owner--identified in token--subscribes to notifications of new messages in *datastore-key* (*segment-key* @ *identity*).  
        
        If the *shunt* query parameter is not specified, subscription doesn't send actual message content, just notification of new messages with a new *seq-id*.

        If the *shunt* query parameter is specified, full message content is sent via subscription.  Unless the *auto-acknowledge* flag is set, the messages do have to be explicitly [acknowledged](#operation-acknowledge-WIRE) to clear the backchannel queue.  Failure to acknowledge messages with *auto-acknowledge* off and [limit-bytes set](#definition-DatastoreKeySettings) may lead to a full backchannel queue and dropped messages; not forwarded to these live subscriptions.
      tags:
        - backchannel queues
      parameters:
        - in: body
          name: payload
          description: |

            | *syntax*        | *bytes* | *value* |
            | ---             | ---     | ---     |
            | req-id          | 8       |         |
            | len             | 8       | SL + IL + DL + 5 |
            | opcode          | 1       | 0x07    |
            | segment-key-len | 1       | SL == length(segment-key) |
            | segment-key     | SL      |         |
            | identity-len    | 1       | IL == length(identity) |
            | identity        | IL      |         |
            | delegate-len    | 1       | DL == length(delegate) |
            | delegate        | DL      |         |
            | flags           | 1       | ``      |
          schema:
            type: object
            required:
              - req-id
              - len
              - opcode
              - segment-key-len
              - segment-key
              - identity-len
              - delegate-len
              - payload
            properties:
              req-id:
                type: number
                description: |
                  Request ID: a connection specific unique identifier of the request/responses.  Has no meaning beyond connection.
              len:
                type: bytes
                description: |
                  Number of bytes of the whole message:  length(auth) + length(segment-key) + length(identity) + length(payload) + 11.
              opcode:                  
                type: bytes
                description: |
                  Operation code.
              segment-key-len:
                type: number
                description: |
                  Number of bytes for *segment-key*.
              segment-key:
                type: bytes
                description: |
                  See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#segment-key).
              identity-len:
                type: number
                description: |
                  Number of bytes for *identity*.
              identity:
                type: bytes
                description: |
                  Optional identity.Â Â If provided, must be complimentary to the *delegate* parameter or one of public restricted identities:Â Â 0 .. 9999.Â Â If not provided, identity is that of token owner.

                  See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#identity).
              delegate-len:
                type: number
                description: |
                  Number of bytes for *delegate*.
              delegate:
                type: bytes
                description: |
                  Qualifies that this subscription is meant for a [delegate](#tag-delegate) of *segment-key*.  The value is the delegate's [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md).

                  If this parameter is present, the *identity* query parameter is mandatory.  The *segment-key*
                  from the path and this *identity* from the query constitute the *datstore-key*.

                  Only the *delegate* may subscribe to these qualified mesages.
              flags:
                type: bytes
                description: |
                  A byte of flags.  

                  | *value* | *name* | *description* |
                  | --- | --- | --- |
                  | 0x1 | shunt | `false`: subscription doesn't send actual message content, just notification of new messages with a new *seq-id*.  `true`: full message content is sent via subscription. |
                  | 0x2 | auto-acknowledge | `false`: explicit acknowledgment via [acknowledge](#operation-acknowledge-WIRE) call required.  `true`: messages are auto-acknowledged, not queued.  This falg only applies in conjunction with the *shunt* flag |                  
      consumes:
        - application/octet-stream
      produces:
        - application/octet-stream
      security:
        - Authorization WSS: []
      responses:
        RESPONSE:
          $ref: "#/responses/WIRE"
        code == 222:
          description: |
            For as long as the connection remains opened, all *datastore-keys*--subscribed to using this *subscribe* request--may emit 222 responses.

            The following details the possible messages that will come across.

            An example event stream coming across the Web socket for a *non-shunt* subscription:

            | *syntax*        | *bytes* | *value* |
            | ---             | ---     | ---     |
            | loop {          |         |         |
            |   seq-id        | 4       |         |
            | }               |         | ``      |

            The events stream are just *seq-id*s to be retrieved via [the getter](#operation-fetch-messages-WIRE).

            An example event stream coming across the Web scoket for a *shunt* subscription:

            | *syntax*        | *bytes* | *value* |
            | ---             | ---     | ---     |
            | loop {          |         |         |
            |   seq-id        | 4       |         |
            |   message-len   | 8       | ML = length(message) |
            |   message       | *       |         |
            | }               |         | ``      |

          schema:
            type: object
            required:
              - seq-id
              - message-len
              - message
            properties:
              seq-id:
                type: number
                description: |
                  Consecutivelly increasing message sequence ID        
              message-len:
                type: number
                description: |
                  Number of bytes for *message*.
              message:
                type: bytes
                description: |
                  The message byte stream value.

  set delegate data:
    options:
      summary: A delegate sets their specific value under this datastore-key.
      description: |
        Payload contents is written as a new value into *datastore-key* (segment-key @ identity) qualified by the caller's [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md).  
        
        This call requires two identities:  the *segment-key* and [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) from the path constitute the *datastore-key*.  The [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) from the [authorization header](#security-definition-Authorization Header)
        is used to qualify the data stored at the *segment-key*: this [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) is the delegate.

        For the *set* to succeed the *datastore-key* (segment-key @ identity) must exist and be owned by the [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md)
        from the path.

        A delegate can only write their value to this *segment-key* [settings on *segment-key* permitting](#definition-DatastoreKeySettings).  Only the delegate identified can write data.  The *settings* are solely to identify who the delegates can be.
      tags:
        - delegate
      parameters:
        - in: body
          name: payload
          description: |

            | *syntax*        | *bytes* | *value* |
            | ---             | ---     | ---     |
            | req-id          | 8       |         |
            | len             | 8       | SL + IL + length(payload) + 3 |
            | opcode          | 1       | 0x08    |
            | segment-key-len | 1       | SL == length(segment-key) |
            | segment-key     | SL      |         |
            | identity-len    | 1       | IL == length(identity) |
            | identity        | IL      |         |
            | payload         | *       | ``      |
          schema:
            type: object
            required:
              - req-id
              - len
              - opcode
              - segment-key-len
              - segment-key
              - identity-len
              - payload
            properties:
              req-id:
                type: number
                description: |
                  Request ID: a connection specific unique identifier of the request/responses.  Has no meaning beyond connection.
              len:
                type: bytes
                description: |
                  Number of bytes of the whole message:  length(auth) + length(segment-key) + length(identity) + length(payload) + 11.
              opcode:                  
                type: bytes
                description: |
                  Operation code.
              segment-key-len:
                type: number
                description: |
                  Number of bytes for *segment-key*.
              segment-key:
                type: bytes
                description: |
                  See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#segment-key).
              identity-len:
                type: number
                description: |
                  Number of bytes for *identity*.
              identity:
                type: bytes
                description: |
                  Required identity of *segment-key* owner--[authorization header](#security-definition-Authorization Header) [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) is used for qualifying the delegate.

                  See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#identity).
              payload:
                type: bytes
                description: |
                  The payload byte-stream.
      consumes:
        - application/octet-stream
      produces:
        - application/octet-stream
      security:
        - Authorization WSS: []
      responses:
        RESPONSE:
          $ref: "#/responses/WIRE"
        code == 200:
          description: |
            Value successfully set.
        code == 400:
          $ref: "#/responses/400"
        code == 403:
          $ref: "#/responses/403"
        code == 429:
          $ref: "#/responses/429"
  get delegate data:
    options:
      summary: A delegate retrieves their specific value under this datastore-key.
      description: |
        Retrieve contents from *datastore-key* (segment-key @ identity) qualified by the caller's [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md).  

        This call requires two identities:  the *segment-key* and [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) from the path constitute the *datastore-key*.  The [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) from the [authorization header](#security-definition-Authorization Header)
        is used to qualify the data stored at the *segment-key*: this [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) is the delegate.        
      tags:
        - delegate
      parameters:
        - in: body
          name: payload
          description: |

            | *syntax*        | *bytes* | *value* |
            | ---             | ---     | ---     |
            | req-id          | 8       |         |
            | len             | 8       | SL + IL + 3 |
            | opcode          | 1       | 0x09    |
            | segment-key-len | 1       | SL == length(segment-key) |
            | segment-key     | SL      |         |
            | identity-len    | 1       | IL == length(identity) |
            | identity        | IL      | ``      |
          schema:
            type: object
            required:
              - req-id
              - len
              - opcode
              - segment-key-len
              - segment-key
              - identity-len
            properties:
              req-id:
                type: number
                description: |
                  Request ID: a connection specific unique identifier of the request/responses.  Has no meaning beyond connection.
              len:
                type: bytes
                description: |
                  Number of bytes of the whole message:  length(auth) + length(segment-key) + length(identity) + length(payload) + 11.
              opcode:                  
                type: bytes
                description: |
                  Operation code.
              segment-key-len:
                type: number
                description: |
                  Number of bytes for *segment-key*.
              segment-key:
                type: bytes
                description: |
                  See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#segment-key).
              identity-len:
                type: number
                description: |
                  Number of bytes for *identity*.
              identity:
                type: bytes
                description: |
                  Required identity of *segment-key* owner--[authorization header](#security-definition-Authorization Header) [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) is used for qualifying the delegate.

                  See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#identity).
      consumes:
        - application/octet-stream
      produces:
        - application/octet-stream
      security:
        - Authorization WSS: []
      responses:
        RESPONSE:
          $ref: "#/responses/WIRE"
        code == 200:
          description: |
            The value of *datastore-key* (segment-key @ identity).
        code == 400:
          $ref: "#/responses/400"
        code == 403:
          $ref: "#/responses/403"
        code == 429:
          $ref: "#/responses/429"
  delete delegate data:
    options:
      summary: A delegate deletes their specific data under this datastore-key.
      description: |
        Delete delegate's data filed under the *datastore-key* (segment-key @ identity).  

        This call requires two identities:  the *segment-key* and [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) from the path constitute 
        the *datastore-key*.  The [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) from the [authorization header](#security-definition-Authorization Header)
        is used to qualify the data stored at the *segment-key*: this [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) is the delegate.

        The *datastore-key* must be owned by the in-path [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md).
      tags:
        - delegate
      parameters:
        - in: body
          name: payload
          description: |

            | *syntax*        | *bytes* | *value* |
            | ---             | ---     | ---     |
            | req-id          | 8       |         |
            | len             | 8       | SL + IL + 3 |
            | opcode          | 1       | 0x0A    |
            | segment-key-len | 1       | SL == length(segment-key) |
            | segment-key     | SL      |         |
            | identity-len    | 1       | IL == length(identity) |
            | identity        | IL      | ``      |
          schema:
            type: object
            required:
              - req-id
              - len
              - opcode
              - segment-key-len
              - segment-key
              - identity-len
            properties:
              req-id:
                type: number
                description: |
                  Request ID: a connection specific unique identifier of the request/responses.  Has no meaning beyond connection.
              len:
                type: bytes
                description: |
                  Number of bytes of the whole message:  length(auth) + length(segment-key) + length(identity) + length(payload) + 11.
              opcode:                  
                type: bytes
                description: |
                  Operation code.
              segment-key-len:
                type: number
                description: |
                  Number of bytes for *segment-key*.
              segment-key:
                type: bytes
                description: |
                  See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#segment-key).
              identity-len:
                type: number
                description: |
                  Number of bytes for *identity*.
              identity:
                type: bytes
                description: |
                  Required identity of *segment-key* owner--[authorization header](#security-definition-Authorization Header) [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) is used for qualifying the delegate.

                  See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#identity).
      consumes:
        - application/octet-stream
      produces:
        - application/octet-stream
      security:
        - Authorization WSS: []
      responses:
        RESPONSE:
          $ref: "#/responses/WIRE"
        code == 200:
          description: |
            Success.  Empty.
        code == 400:
          $ref: "#/responses/400"
        code == 403:
          $ref: "#/responses/403"
        code == 429:
          $ref: "#/responses/429"
  
  get all delegate values:
    options:
      summary: Retrieves all delegate data under segment-key as map of delegate identities to content.
      description: |
        Retrieve all delegate data under *datastore-key* (segment-key @ identity) as map of delegate
        identities to content.

        The *segment-key* and [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) from the path constitute the *datastore-key*.
      tags:
        - delegate
      parameters:
        - in: body
          name: payload
          description: |

            | *syntax*        | *bytes* | *value* |
            | ---             | ---     | ---     |
            | req-id          | 8       |         |
            | len             | 8       | SL + IL + 11 |
            | opcode          | 1       | 0x0B    |
            | segment-key-len | 1       | SL == length(segment-key) |
            | segment-key     | SL      |         |
            | identity-len    | 1       | IL == length(identity) |
            | identity        | IL      |         |
            | page            | 8       | ``      |
          schema:
            type: object
            required:
              - req-id
              - len
              - opcode
              - segment-key-len
              - segment-key
              - identity-len
              - page
            properties:
              req-id:
                type: number
                description: |
                  Request ID: a connection specific unique identifier of the request/responses.  Has no meaning beyond connection.
              len:
                type: bytes
                description: |
                  Number of bytes of the whole message:  length(auth) + length(segment-key) + length(identity) + length(payload) + 11.
              opcode:                  
                type: bytes
                description: |
                  Operation code.
              segment-key-len:
                type: number
                description: |
                  Number of bytes for *segment-key*.
              segment-key:
                type: bytes
                description: |
                  See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#segment-key).
              identity-len:
                type: number
                description: |
                  Number of bytes for *identity*.
              identity:
                type: bytes
                description: |
                  Required identity of *segment-key* owner.

                  See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#identity).
              page:
                type: number
                description: |
                  Indicate the page # of the data to retrieve.
      consumes:
        - application/octet-stream
      produces:
        - application/octet-stream
      security:
        - Authorization WSS: []
      responses:
        RESPONSE:
          $ref: "#/responses/WIRE"
        code == 200:
          description: |
            List of all delegate data under the *datastore-key*.

            The results are paginated; see *page* parameter of request.

            | *syntax*        | *bytes* | *value* |
            | ---             | ---     | ---     |
            | page            | 8       |         |
            | pages           | 8       |         |
            | loop {          |         |         |
            |   delegate-len  | 1       | DL == length(delegate) |
            |   delegate      | DL      |         |
            |   message-len   | 8       | ML = length(message) |
            |   message       | *       |         |
            | }               |         | ``      |

          schema:
            type: object
            required:
              - page
              - pages
              - delegate-len
              - delegate
              - message-len
              - message
            properties:
              page:
                type: number
                description: |
                  Indicates this result's page # out of *pages*.   
              pages:
                type: number
                description: |
                  Indicates the total number of data pages available to retrieve.  
              delegate-len:
                type: number
                description: |
                  Number of bytes for *delegate*.
              delegate:
                type: bytes
                description: |
                  Qualifies which [delegate](#tag-delegate) of *segment-key* this message corresponds to.  The value is the delegate's [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md).
              message-len:
                type: number
                description: |
                  Number of bytes for *message*.
              message:
                type: bytes
                description: |
                  The message byte stream value.
        code == 400:
          $ref: "#/responses/400"
        code == 403:
          $ref: "#/responses/403"
        code == 429:
          $ref: "#/responses/429"
  /settings/{segment-key}:
    put:
      summary: Setup settings for given datastore-key (segment-key @ identity).
      description: |
        Setup data and backchannel settings for given *datastore-key* (*segment-key* @ *identity*).
      tags:
        - datastore-key settings
      parameters:
        - in: body
          name: datastore-value
          schema:
            $ref: "#/definitions/DatastoreKeySettings"
        - in: path
          name: segment-key
          required: true
          description: |
            See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#segment-key).
          type: string
        - in: query
          name: identity
          required: false
          description: |
            Optional identity.Â Â If provided, must be one of public restricted identities:Â Â 0 .. 9999.Â Â If not provided, identity is that of token owner.

            See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#identity).
          type: string
      security:
        - Authorization Header: []
      consumes:
        - application/json
      responses:
        200:
          description: |
            Settings applied successfully.
        400:
          $ref: "#/responses/400"
        403:
          $ref: "#/responses/403"
        429:
          $ref: "#/responses/429"
    get:
      summary: Returns settings for a given datastore-key.
      description: |
        Returns data and backchannel settings for a given *datastore-key* (*segment-key* @ *identity*).
      tags:
        - datastore-key settings
      parameters:
        - in: path
          name: segment-key
          required: true
          description: |
            See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#segment-key).
          type: string
        - in: query
          name: identity
          required: false
          description: |
            Optional identity.Â Â If provided, must be one of public restricted identities:Â Â 0 .. 9999.Â Â If not provided, identity is that of token owner.

            See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#identity).
          type: string
      security:
        - Authorization Header: []
      produces:
        - application/json
      responses:
        200:
          description: |
            The value of *datastore-key* (segment-key @ identity).
          schema:
            $ref: "#/definitions/DatastoreKeySettings"
        400:
          $ref: "#/responses/400"
        403:
          $ref: "#/responses/403"
        429:
          $ref: "#/responses/429"
  /all-data:
    put:
      summary: Set all user's data on the broker system to the provided payload.
      description: |
        All of the user's data with caller's *identity* is wiped and reset to the payload.

        If transferring a *segment-key* with a public restricted identityÂ (0 .. 9999), if the
        *segment-key* already exists at provided identity for a different *owner*, the message
        call fails with a 400 -- "datastore-key ownership conflict; segment-key @ identity already reserved".

        If the payload is malformated and cannot be imported the message call fails with a 
        400 -- "cannot process input", followed by additional optional verbiage.
      tags:
        - import/export
      parameters:
        - in: body
          name: import-export-payload
          schema:
            $ref: "#/definitions/ImportExportPayload"
      security:
        - Authorization Header: []
      consumes:
        - application/json
      responses:
        200:
          description: |
            Data successfully set.
        400:
          $ref: "#/responses/400"
        403:
          $ref: "#/responses/403"
        429:
          $ref: "#/responses/429"
    post:
      summary: Set all user's data on the broker system from the provided GUID referencing data on a connected persistence network.
      description: |
        All of the user's data with caller's *identity* is wiped and reset to data available at the 
        same *identity* on the specificed persistence network.  The network data is identified by the provided
        *GUID*.  The broker must be able to exchange data on the network that's identified by *type-key*.

        The reciprocal of this setter is the [*GUIDs* getter](#operation--guids-get) to be called
        against the source broker instance.  The source broker is a broker currently furnishing the data to 
        the network.

        If transferring a *segment-key* with a public restricted identityÂ (0 .. 9999), if the
        *segment-key* already exists at provided identity for a different *owner*, the message
        call fails with a 400 -- "datastore-key ownership conflict; segment-key @ identity already reserved".

        If the *type-key* requested is not supported by this broker system the message call fails with
        a 400 -- "invalid type-key, doesn't match broker system capabilities".

        If data from the remote *GUID* cannot be extracted or in otherwise unavailable the message call fails with a 
        400 -- "cannot reach data".

        If the payload from the other broker is malformated and cannot be imported the message call fails 
        with a 400 -- "cannot process input", followed by additional optional verbiage.
      tags:
        - import/export
      parameters:
        - in: path
          name: type-key
          required: true
          description: |
            A *type-key* as per [enumertion](#definition-GUID).
          type: string
        - in: path
          name: guid
          required: true
          description: |
            A *GUID* on the *type-key* network of the source of import data.  Retrieve this using
            [*GUIDs* getter](#operation--guids-get) on the exporting broker instance.
          type: string
      security:
        - Authorization Header: []
      consumes:
        - application/json
      responses:
        200:
          description: |
            Data successfully set.
        400:
          $ref: "#/responses/400"
        403:
          $ref: "#/responses/403"
        429:
          $ref: "#/responses/429"
    get:
      summary: Get all user's data from the broker system.
      description: |
        Get all of the caller's data, based on *identity* passed in.
      tags:
        - import/export
      security:
        - Authorization Header: []
      produces:
        - application/json
      responses:
        200:
          $ref: "#/definitions/ImportExportPayload"
        400:
          $ref: "#/responses/400"
        403:
          $ref: "#/responses/403"
        429:
          $ref: "#/responses/429"
    delete:
      summary: Delete all user's data on the broker system.
      description: |
        Delete all user's data on the broker system, based on *identity* passed in.
      tags:
        - import/export
      security:
        - Authorization Header: []
      responses:
        200:
          description: |
            If all data is deleted.
        400:
          $ref: "#/responses/400"
        403:
          $ref: "#/responses/403"
        429:
          $ref: "#/responses/429"
  /all-data-lock:
    put:
      summary: Locks owners data from any modification until lock is removed. 
      description: |
        All of the user's data with caller's *identity* is locked: cannot be modified in any way.
      tags:
        - import/export
      security:
        - Authorization Header: []
      consumes:
        - application/json
      responses:
        200:
          description: |
            Data successfully locked.
        400:
          $ref: "#/responses/400"
        403:
          $ref: "#/responses/403"
        429:
          $ref: "#/responses/429"
    delete:
      summary: Remove data lock for owner.
      description: |
        Remove data lock for owner:  all user's data can be modified as per specific restrictions of the system and each *segment-key*.
      tags:
        - import/export
      security:
        - Authorization Header: []
      responses:
        200:
          description: |
            Data successfully unlocked.
        400:
          $ref: "#/responses/400"
        403:
          $ref: "#/responses/403"
        429:
          $ref: "#/responses/429"
  /guids:
    get:
      summary: Retrieve GUIDs to user's data on connected persistence networks.
      description: |
        Returns the *GUIDs* pointing to persisted data for the *identity*.  This broker must be the owner of whatever
        private metadata is necessary to furnish data to the persistence network at said *GUID*. 

        The reciprocal of this getter is the [all-data import POST](#operation--all-data-post).
      tags:
        - import/export
      security:
        - Authorization Header: []
      produces:
        - application/json
      responses:
        200:
          description: |
            List of *type-key*, *GUID* pairs.  Each *GUID* is mapped to a *type-key*.  
            A *type-key* identifies the type of persistence network the *GUID* is for.  
          schema:
            type: array
            items:
              $ref: "#/definitions/GUID"
        400:
          $ref: "#/responses/400"
        403:
          $ref: "#/responses/403"
        429:
          $ref: "#/responses/429"  
definitions:
  GUID:
    type: object
    description: |
      *Globally Unique ID* -- An identifier globally unique on a particular network.
    required:
      - type-key
      - guid
    properties:
      type-key:
        type: string
        enum: [ipns-ri]
        description: |
          Identifies the network this *GUID* is for.

          Type      | Notes
          ---       | ---
          ipns-ri   | An [*overhide* reference implementation](https://github.com/JakubNer/overhide-broker) GUID as per [using IPNS](https://github.com/JakubNer/overhide/blob/master/docs/decentralization.md).  `guid`  value will be in the format `<IPNS name>:<private-key>`, where `<IPNS name>` is the public hash visible to all, `<private-key>` must not be shared, it's included to share with other brokers to enable their custody of *identities* data.
      guid:
        type: string
        description: |
          The identifier for given network.
  Transaction:
    type: object
    required:
      - transaction-value
      - transaction-date
    properties:
      transaction-value:
        type: number
        description: |
          Value of the transaction.
      transaction-date:
        type: string
        description: |
          Date-time timestamp of the transaction.

          The date-time is a string in [ISO 8601/RFC3339 format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14).
  RemunerationProvider:
    type: object
    required:
      - key
      - broker-address
      - description-md
    properties:
      key:
        type: string
        description: |
          Remuneration provider identifying key string.
      broker-address:
        type: string
        description: |
          This broker's specific public payment address with the reumneration
          provider.  This is the public address to which a subscription payment
          needs to be made from a user [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md).
      description-md:
        type: string
        description: |
          Description Markdown formatted text for this remuneration provider.
          Can have links and other markdown directing user to more information
          about this remuneration provider.
  RemunerationTier:
    type: object
    required:
      - key
      - description-md
    properties:
      key:
        type: string
        description: |
          Remuneration provider's tier identifying key string.
      description-md:
        type: string
        description: |
          Description Markdown formatted text for this remuneration tier.
          Can have links and other markdown directing user to more information
          about this remuneration provider tier.
  Authorities:
    type: object
    required:
      - read-rate
      - write-rate
      - storage-used
      - storage-limit
      - active-until
      - available-until
    properties:
      read-rate:
        type: integer
        description: |
          Maximum amount of data allowed to be read per unit time for the provided
          identity:  in bytes/hour.

          If client's read-rate is reached within an hour, reads are throttled.
          Throttling is broker implementation specific.

          If negative, the rate is unlimited.
      write-rate:
        type: integer
        description: |
          Maximum amount of data allowed to be written per unit time for the provided
          identity: in bytes/hour.

          If client's write-rate is reached within an hour, writes are throttled.
          Throttling is broker implementation specific.

          If negative, the rate is unlimited.
      storage-used:
        type: integer
        description: |
          Amount of data in bytes stored by this *identity* on this broker system.
      storage-limit:
        type: integer
        description: |
          Maximum amoun tof data in bytes that can be stored by this *identity* on this
          broker system at the current subscription level.

          If negative, storage is unlimited.
      active-until:
        type: string
        description: |
          Date-time until when this *identity* has an 'active' subscription at the currently
          authorized level.

          It's possible once this subscription level expires the *identity* continues to
          hava a subscription at a reduced level.  A subscription level expiry indicates
          some remuneration provider transaction to the broker has lapsed.  The  remuneration provider
          might indicate other transactions to the broker that haven't expired.

          The date-time is a string in [ISO 8601/RFC3339 format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14).

          A 'null' value indicates no expiry of current subscription level.
      available-until:
        type: string
        description: |
          Date-time until when data belonging to this *identity* will be retained within the
          broker system.

          The date-time is a string in [ISO 8601/RFC3339 format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14).

          A 'null' value indicates no expiry; data retained indefinitely.
  DatastoreKeySettings:
    type: object
    required:
      - allow-write
      - allowed-writers
      - allow-publish
      - allowed-publishers
      - allow-delegation
      - allowed-delegates
      - entry-fee
      - limit-bytes
      - limit-bytes-per-second
      - delegate-data-ttl-seconds
    properties:
      allow-write:
        type: string
        enum: [self, signed, invitee]
        description: |
          Indicate who is allowed to write to the *datastore-key*.  The "self" value is default and means only owner of *segment-key* has write rights.

          Value of "signed" indicates *allowed-writers* property must necessairly list [identities](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) allowed to write into this *segment-key*.  
          Other users using this broker system attempting to write to this *segment-key* have their *authentication token* checked against 
          the [identities](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) in *allowed-writers* list.  These could be real authenticated
          broker [identities](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) or [invitee *identities*](#operation--auth-bounce-put).

          Value of "invitee" indicates an invitee of this [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) is allowed to write, see
          the [bounce endpoint](#operation--auth-bounce-put): no *allowed-writers* check.
      allowed-writers:
        type: array
        items:
          type: object
          required:
            - identity
          properties:
            identity:
              type: string
              description: |
                [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) identifying user allowed to write data.
        description: |
          If *allow-write* is "self" this parameter is ignored.

          If *allow-write* is "signed", this parameter is a list of [identities](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) to identify users allowed to write data to this *datastore-key* (*segment-key* @ *identity*).
          These could be real authenticated broker [identities](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) or [invitee *identities*](#operation--auth-bounce-put). 

          Other users using this broker system attempting to write to this *segment-key* have their *authentication token* checked against the [identities](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) in this list.
      allow-publish:
        type: string
        enum: [self, any, signed, invitee]
        description: |
          Indicate who is allowed to publish messages to the *datastore-key*'s backchannel'.  The "self" value is default and means only owner of *segment-key* has publish rights.

          Value of "signed" indicates *allowed-publishers* property must necessairly list [identities](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) allowed to publish messages into this *segment-key*.  
          Other users using this broker system attempting to publish to this *segment-key* have their *authentication token* checked against 
          the [identities](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) in *allowed-publishers* list.  These could be real authenticated
          broker [identities](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) or [invitee *identities*](#operation--auth-bounce-put).

          Value of "invitee" indicates an invitee of this [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) is allowed to publish, see
          the [bounce endpoint](#operation--auth-bounce-put).
      allowed-publishers:
        type: array
        items:
          type: object
          required:
            - identity
          properties:
            identity:
              type: string
              description: |
                [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) identifying user allowed to write data.
        description: |
          if *allow-publish* is "self" or "any" this parameter is ignored.

          If *allow-publish* is "signed", this parameter is a list of [identities](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) to identify users allowed to publish messages to this *datastore-key* (*segment-key* @ *identity*).
          These could be real authenticated broker [identities](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) or [invitee *identities*](operation--auth-bounce-put).

          Other users using this broker system attempting to publish to this *segment-key* have their *authentication token* checked against the [identities](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) in this list.
      allow-delegation:
        type: string
        enum: [none, any, signed, invitee]
        description: |
          Indicate who is allowed to [write data](#tag-delegate) to this *segment-key* as a delegate
          and who's allowed to work with delegate-qualified backchannels on this *segment-key*:  it's
          the same group.

          Value of "signed" indicates *allowed-delegates* property must necessairly list [identities](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) allowed to act as delegates for this *segment-key*.  Delegates attempting to use this *segment-key* have their [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) checked against the *allowed-delegates* list.

          Value of "invitee" indicates an invitee of this [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) are allowed to be delegates, see
          the [bounce endpoint](#operation--auth-bounce-put).
      allowed-delegates:
        type: array
        items:
          type: object
          required:
            - identity
          properties:
            identity:
              type: string
              description: |
                [identity](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) identifying user allowed to become delegates.
        description: |
          if *allow-delegation* is "none" or "any" this parameter is ignored.

          If *allow-delegation* is "signed", this parameter is a list of [identities](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) to identify users allowed to be delegates for this *datastore-key* (*segment-key* @ *identity*).
          These could be real authenticated broker [identities](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) or [invitee *identities*](#operation--auth-bounce-put).

          Delegates attempting to use this *segment-key* have their *authentication token* checked against the [identities](https://github.com/JakubNer/overhide/blob/master/docs/identity.md) in this list.  
      entry-fee:
        type: array
        items:
          type: object
          required:
            - value
            - since
            - remuneration-key
          properties:
            value:
              type: number
              description: |
                Amount of currency--as per *remuneration-key* required to be able to write/publish to this *segment-key*.
            since:
              type: string
              description: |
                The remuneration *value* must accumulate in transactions since this date-time (inclusive) until now.

                The date-time is a string in [ISO 8601/RFC3339 format](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14).
            remuneration-key:
              type: string
              description: |
                One of the remuneration provider keys from /capabilities/remuneration-providers

                The provided address corresponds to one of the remuneration providers, define it.
        description: |
          if *allow-publish* or *allow-write* is "self", "any", "signed" this parameter is ignored.

          If *allow-publish* or *allow-write* is "invitee", this parameter the minimum remuneration value required to be able to write the write/publish operations
          on this *segment-key*.      
      limit-bytes:
        type: number
        description: |
          Maximum number of bytes of total content allowed for this *segment-key* (if not delegated) or per delegate of this *segment-key* (if delegated).  This includes the written value as well as all published messages.  If the *segment-key* has delegates, the value is per delegate:  the actual limit is multiplied by the number of delegates.
      overlimit-publish-action:
        type: string
        description: |
          What should the system do if *limit-bytes* is exceeded on a message publish?  Allowed values:

          | *key* | *description* |
          | ---   | ---  |
          | "reject" | reject the message publish with error |
          | "drop-newest" | publish the message but drop newest messages to make space |
          | "drop-oldest" | publish the message but drop oldest messages to make space |
      limit-bytes-per-second:
        type: number
        description: |
          Maximum number of bytes/second a user, other than the owner, is allowed to write or publish to this *segment-key*.
      limit-delegates:
        type: number
        description: |
          Number of delegates allowed for the *segment-key*.
      delegate-data-ttl-seconds:
        type: number
        description: |
          Time-to-live--in seconds--of [delegate data](#tag-delegate) before it is elegible for cleanup.  Refreshed on any activity on the *segment-key* qualified by the delegate.  
  Message:
    type: object
    required:
      - seq-id
      - message
    properties:
      seq-id:
        type: integer
        description: |
          Consecutivelly increasing message sequence ID
      message:
        type: string
        description: |
          The message byte stream base64 encoded.
  ImportExportPayload:
    type: object
    required:
      - settings
      - values
      - messages
    properties:
      settings:
        type: array
        items:
          type: object
          description: |
            Settings for datastore-key to transfer.
          required:
            - segment-key
            - settings
          properties:
            segment-key:
              type: string
              description: |
                See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#segment-key).
            identity:
              type: string
              description: |
                Optional identity.Â Â If provided, must be one of public restricted identities:Â Â 0 .. 9999.Â Â If not provided, identity is that of token owner.

                See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#identity).
            settings:
              $ref: "#/definitions/DatastoreKeySettings"
      values:
        type: array
        items:
          type: object
          description: |
            Datastore values to transfer.
          required:
            - segment-key
            - bytes
          properties:
            segment-key:
              type: string
              description: |
                See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#segment-key).
            identity:
              type: string
              description: |
                Optional identity.Â Â If provided, must be one of public restricted identities:Â Â 0 .. 9999.Â Â If not provided, identity is that of token owner.

                See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#identity).
            bytes:
              type: string
              description: |
                The data byte stream base64 encoded.
      messages:
        type: array
        items:
          type: object
          description: |
            All messages from the backchannel at the givent datastore-key

            Messages enqueued at *datastore-key* (segment-key @ identity) in increasing *seq-id* order.

            Messages are in order of consecutivelly increasing message sequence ID (*seq-id*).  The message sequence IDs are internal system identifiers for the messages furnished by this *datastore-key*, they're unique to this *datastore-key* and consecutive.
          required:
            - segment-key
            - messages
          properties:
            segment-key:
              type: string
              description: |
                See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#segment-key).
            identity:
              type: string
              description: |
                Optional identity.Â Â If provided, must be one of public restricted identities:Â Â 0 .. 9999.Â Â If not provided, identity is that of token owner.

                See [glossary](https://github.com/JakubNer/overhide/blob/master/docs/glossary.md#identity).
            messages:
              type: array
              items:
                $ref: "#/definitions/Message"

responses:
  WIRE:
    schema:
      type: object
      required:
        - len
        - code
        - response
      properties:
        req-id:
          type: number
          description: |
            Request ID of the request this response/subscription event corresponds to.
        len:
          type: bytes
          description: |
            Number of bytes of the whole response message:  length(response) + 2 bytes.
        code:
          type: number
          description: |
            One of the WIRE protocol response codes with meanings as detailed by this endpoint.

            They roughly match HTTP response codes.

            This *default* response applies to all *WIRE* event responses.  See a listing of response codes for each specific *WIRE* event for specific codes.

            A code other than *200* or *222*  will always have the *response* byte-stream be a UTF-16 string with meanings as detailed by the *WIRE* event's response code definitions.
        response:
          type: bytes
          description: |
            The response byte-stream for a *code* of *200* or *222*.  A UTF-16 encoded string with error text for all other *codes*.

            Refer to the specific *WIRE* event's response *code* *200* or *222* for the syntax and semantics of this *response* byte-stream descriptor.
      description: |
        WebSocket Requests may have one or more response events.  Each response event from the *overhide* broker is a byte-stream in the following format:

        | *syntax *    | *bytes* | *value* |
        | ---          | ---     | ---     |
        | req-id       | 8       |         |
        | len          | 8       | length(response) + 2 |
        | code         | 2       |         |
        | response     | *       | ``      |
        
  400:
    description: |
      A bad request from the client results in one or more of the following error message strings:

      - invalid remuneration-key, doesn't match broker system capabilities
      - address incompatible with remuneration provider
      - invalid signature
      - invalid datastore-key requested; segment-key or identity mismatch
      - datastore-key ownership conflict; segment-key @ identity already reserved
      - invalid type-key, doesn't match broker system capabilities
      - cannot reach data
      - cannot process input

      The message enum might be extended by broker system.
  401:
    description: |
      For an endpoint protected with the [token security definition](#security-definition-Authorization Header), an "Authorization" header was not provided a valid token--as returned from the [authenticate endpoint](#operation--auth-authenticate-put).
  403:
    description: |
      There is an access violation for this valid and authenticated *identity* against this valid *datastore-key*.

      1. The authenticated *identity* has insufficient access rights to this valid *datastore-key* for the operation.  Review the [access rights](#definition-DatastoreKeySettings) as manipulated with the [settings endpoints](#tag-datastore-key-settings).
      1. The API request would exceed rates and limits as set out within the authorities at the current [subscription plan](#operation--capabilities-remuneration-tiers--remuneration-key--get) or *datastore-key* [entry-fee](#definition-DatastoreKeySettings).

      Errors equally apply to "inviee" *identities*.

      Results in one or more of the following error message strings:

      - no write access
      - no publish access
      - storage limit exceeded
      - read-rate exceeded
      - write-rate exceeded
        
      The message enum might be extended by broker system.

      Broker systems might not throw up this response when read and write rates are exceeded.  Instead a broker system might start throttling responses or responding at a lower-priority.
  409:
    description: |
      Go play a lottery:  the generated identity conflicts with some other identity or ended up being a restricted number <10000.

      *User-address* hashed with its *secret-phrase* must be unique within the system.  Another *user-address*/*secret-phrase* already in the system hashes to the same hash as the provided *user-address*/*secret-phrase*.

      Try a different *secret-phrase*.
  429:
    description: |
      Client is calling the API too frequently.

      Conditions for this response to occur are broker system dependant.
securityDefinitions:
  Authorization Header:
    type: apiKey
    in: header
    name: Authorization
    description: |
      Provides an authentication token as retrieved with either the [authentication endpoint](#path--auth-authenticate)
      or the [invitee bouncer endpoint](#path--auth-bounce).

      The token returned by either call must be provided in an "Authorization" header to HTTPS calls secured with this security definition.

      The tokens are whitelisted by the *overhide* broker until revoked or expired (at broker's purview).  
      
      The token contains the *identity*--hashed in implementation specific ways--to help with access control for the rest of the API.  
      
      Details in the [*identity write-up*](https://github.com/JakubNer/overhide/blob/master/docs/identity.md#authenticated-sessions).
  Authorization WSS:
    type: apiKey
    in: query
    name: auth
    description: |
      Provides an authentication token as retrieved with either the [authentication endpoint](#path--auth-authenticate)
      or the [invitee bouncer endpoint](#path--auth-bounce).

      For WSS, the token must be provided when establishing the connection:

      ```
        WebSocket = require 'ws'
        ws = new WebSocket 'ws://localhost:8000',{
          headers : {
            token: "..."
          }
        }
      ```

      Token details are same as per the [Authorization Header](#security-definition-Authorization Header) security scheme.
externalDocs:
  description: overhide documentation
  url: 'https://pages.github.com/JakubNer/overhide'
